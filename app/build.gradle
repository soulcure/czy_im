apply plugin: 'com.android.application'
android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "cn.net.cyberway"
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode 40
        versionName "4.2.0"
        // Enabling multidex support.
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    signingConfigs {
        release {
            storeFile file('colourlife.keystore')
            storePassword 'colourlife'
            keyAlias 'colourlife'
            keyPassword 'colourlife'
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    //指定打包后应用名称
    applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name == "release") {
                outputFileName = "app_v${defaultConfig.versionName}_${getPackageInfo(variant)}_${releaseTime()}.apk"
            } else {
                outputFileName = "app_${defaultConfig.versionName}_${getPackageInfo(variant)}_${releaseTime()}_debug.apk"
            }

            variant.assemble.doLast {
                copyBuildApk()
            }

        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    google()
}

dependencies {
    implementation fileTree(include: '*.jar', dir: 'libs')
    implementation project(':huxin_sdk')
    implementation 'com.github.ittianyu:BottomNavigationViewEx:1.2.4'
    implementation 'com.jaredrummler:material-spinner:1.1.0'               //Spinner

    implementation 'com.android.support:multidex:1.0.3'
    implementation "com.android.support:support-v4:${SUPPORT_VERSION}"
    implementation "com.android.support:appcompat-v7:${SUPPORT_VERSION}"
    implementation "com.android.support:cardview-v7:${SUPPORT_VERSION}"
    implementation "com.android.support:design:${SUPPORT_VERSION}"
    implementation "com.android.support:support-v13:${SUPPORT_VERSION}"
    implementation "com.android.support:exifinterface:${SUPPORT_VERSION}"

    annotationProcessor 'com.alibaba:arouter-compiler:1.1.4'
}

project.afterEvaluate {
    handleBuildTag()
}

def copyBuildApk() {
    copy {
        from("${buildDir}/outputs/apk/release") {
            include "*.apk"
        }
        into '../dist'
    }
}


def handleBuildTag() {
    def launch = getLaunchMode()
    if (launch != null) {
        def appCfgFilePath = "../huxin_sdk/src/main/java/com/youmai/hxsdk/config/AppConfig.java"
        def appCfgRegexStr = "public\\s+final\\s+static\\s+int\\s+LAUNCH_MODE\\s+=\\s+[012];"
        def appCfgReplaceStr = "public final static int LAUNCH_MODE = " + launch + ";"
        handleReplaceSrc project, appCfgRegexStr, appCfgReplaceStr, appCfgFilePath
    }
}


def getLaunchMode() {
    if (project.hasProperty('launch_mode')) {
        return project.getProperties().getAt('launch_mode')
    } else {
        return 1      //default 正式环境
    }
}

def getPackageInfo(variant) {
    def launch = getLaunchMode()

    if (launch == "0") {
        return "color_test"
    } else if (launch == "1") {
        return "color_beta"
    } else if (launch == "2") {
        return "rel"
    }
}


def static handleReplaceSrc(project, regexStr, replaceStr, filePath) {
    def srcFile = project.file filePath
    def newReplaceStr = srcFile.text.replaceAll regexStr, replaceStr
    srcFile.write newReplaceStr, "UTF-8"
}

def static releaseTime() {
    return new Date().format("MMdd_HHmm")
}
