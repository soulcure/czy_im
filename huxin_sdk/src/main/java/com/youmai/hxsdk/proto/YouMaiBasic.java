// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YouMai.Basic.proto

package com.youmai.hxsdk.proto;

public final class YouMaiBasic {
    private YouMaiBasic() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
    }

    /**
     * Protobuf enum {@code ServiceType}
     */
    public enum ServiceType
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>COM_SERVER = 1;</code>
         */
        COM_SERVER(0, 1),
        /**
         * <code>ROUTER_SERVER = 2;</code>
         */
        ROUTER_SERVER(1, 2),
        /**
         * <code>LOADBALANCE_SERVER = 3;</code>
         */
        LOADBALANCE_SERVER(2, 3),
        /**
         * <code>TRANSFER_SERVER = 4;</code>
         */
        TRANSFER_SERVER(3, 4),;

        /**
         * <code>COM_SERVER = 1;</code>
         */
        public static final int COM_SERVER_VALUE = 1;
        /**
         * <code>ROUTER_SERVER = 2;</code>
         */
        public static final int ROUTER_SERVER_VALUE = 2;
        /**
         * <code>LOADBALANCE_SERVER = 3;</code>
         */
        public static final int LOADBALANCE_SERVER_VALUE = 3;
        /**
         * <code>TRANSFER_SERVER = 4;</code>
         */
        public static final int TRANSFER_SERVER_VALUE = 4;


        public final int getNumber() {
            return value;
        }

        public static ServiceType valueOf(int value) {
            switch (value) {
                case 1:
                    return COM_SERVER;
                case 2:
                    return ROUTER_SERVER;
                case 3:
                    return LOADBALANCE_SERVER;
                case 4:
                    return TRANSFER_SERVER;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ServiceType>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<ServiceType>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<ServiceType>() {
                    public ServiceType findValueByNumber(int number) {
                        return ServiceType.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(0);
        }

        private static final ServiceType[] VALUES = values();

        public static ServiceType valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private ServiceType(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:ServiceType)
    }

    /**
     * Protobuf enum {@code ServiceID}
     */
    public enum ServiceID
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>SID_MONITOR = 1;</code>
         */
        SID_MONITOR(0, 1),
        /**
         * <code>SID_CONN = 2;</code>
         */
        SID_CONN(1, 2),
        /**
         * <code>SID_DISPATCH = 3;</code>
         */
        SID_DISPATCH(2, 3),
        /**
         * <code>SID_LOGIN = 4;</code>
         */
        SID_LOGIN(3, 4),
        /**
         * <code>SID_MSG = 5;</code>
         */
        SID_MSG(4, 5),
        /**
         * <code>SID_LOADBALANCE = 6;</code>
         */
        SID_LOADBALANCE(5, 6),
        /**
         * <code>SID_BROADCAST = 7;</code>
         */
        SID_BROADCAST(6, 7),
        /**
         * <code>SID_DBPROXY = 8;</code>
         */
        SID_DBPROXY(7, 8),
        /**
         * <code>SID_GROUP = 9;</code>
         */
        SID_GROUP(8, 9),
        /**
         * <code>SID_BUDDY = 10;</code>
         */
        SID_BUDDY(9, 10),
        /**
         * <code>SID_REDIS = 100;</code>
         * <p>
         * <pre>
         * other server
         * </pre>
         */
        SID_REDIS(10, 100),;

        /**
         * <code>SID_MONITOR = 1;</code>
         */
        public static final int SID_MONITOR_VALUE = 1;
        /**
         * <code>SID_CONN = 2;</code>
         */
        public static final int SID_CONN_VALUE = 2;
        /**
         * <code>SID_DISPATCH = 3;</code>
         */
        public static final int SID_DISPATCH_VALUE = 3;
        /**
         * <code>SID_LOGIN = 4;</code>
         */
        public static final int SID_LOGIN_VALUE = 4;
        /**
         * <code>SID_MSG = 5;</code>
         */
        public static final int SID_MSG_VALUE = 5;
        /**
         * <code>SID_LOADBALANCE = 6;</code>
         */
        public static final int SID_LOADBALANCE_VALUE = 6;
        /**
         * <code>SID_BROADCAST = 7;</code>
         */
        public static final int SID_BROADCAST_VALUE = 7;
        /**
         * <code>SID_DBPROXY = 8;</code>
         */
        public static final int SID_DBPROXY_VALUE = 8;
        /**
         * <code>SID_GROUP = 9;</code>
         */
        public static final int SID_GROUP_VALUE = 9;
        /**
         * <code>SID_BUDDY = 10;</code>
         */
        public static final int SID_BUDDY_VALUE = 10;
        /**
         * <code>SID_REDIS = 100;</code>
         * <p>
         * <pre>
         * other server
         * </pre>
         */
        public static final int SID_REDIS_VALUE = 100;


        public final int getNumber() {
            return value;
        }

        public static ServiceID valueOf(int value) {
            switch (value) {
                case 1:
                    return SID_MONITOR;
                case 2:
                    return SID_CONN;
                case 3:
                    return SID_DISPATCH;
                case 4:
                    return SID_LOGIN;
                case 5:
                    return SID_MSG;
                case 6:
                    return SID_LOADBALANCE;
                case 7:
                    return SID_BROADCAST;
                case 8:
                    return SID_DBPROXY;
                case 9:
                    return SID_GROUP;
                case 10:
                    return SID_BUDDY;
                case 100:
                    return SID_REDIS;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ServiceID>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<ServiceID>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<ServiceID>() {
                    public ServiceID findValueByNumber(int number) {
                        return ServiceID.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(1);
        }

        private static final ServiceID[] VALUES = values();

        public static ServiceID valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private ServiceID(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:ServiceID)
    }

    /**
     * Protobuf enum {@code COMMANDID}
     */
    public enum COMMANDID
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>HEART_BEAT = 1;</code>
         */
        HEART_BEAT(0, 1),
        /**
         * <code>HEART_BEAT_ACK = 2;</code>
         */
        HEART_BEAT_ACK(1, 2),
        /**
         * <code>ROUTE_REQ = 20;</code>
         */
        ROUTE_REQ(2, 20),
        /**
         * <code>ROUTE_ONLINECHECK = 21;</code>
         */
        ROUTE_ONLINECHECK(3, 21),
        /**
         * <code>ROUTE_ONLINECHECK_ACK = 22;</code>
         */
        ROUTE_ONLINECHECK_ACK(4, 22),
        /**
         * <code>ROUTE_PHONE_CHECK = 23;</code>
         */
        ROUTE_PHONE_CHECK(5, 23),
        /**
         * <code>ROUTE_PHONE_CHECK_ACK = 24;</code>
         */
        ROUTE_PHONE_CHECK_ACK(6, 24),
        /**
         * <code>USER_LOGIN = 101;</code>
         */
        USER_LOGIN(7, 101),
        /**
         * <code>USER_LOGIN_ACK = 102;</code>
         */
        USER_LOGIN_ACK(8, 102),
        /**
         * <code>USER_LOGOFF = 103;</code>
         */
        USER_LOGOFF(9, 103),
        /**
         * <code>USER_LOGOFF_ACK = 104;</code>
         */
        USER_LOGOFF_ACK(10, 104),
        /**
         * <code>MULTI_DEVICE_KICKED_NOTIFY = 105;</code>
         */
        MULTI_DEVICE_KICKED_NOTIFY(11, 105),
        /**
         * <code>IM_TEXT = 106;</code>
         */
        IM_TEXT(12, 106),
        /**
         * <code>IM_PICTURE = 107;</code>
         */
        IM_PICTURE(13, 107),
        /**
         * <code>IM_AUDIO = 108;</code>
         */
        IM_AUDIO(14, 108),
        /**
         * <code>IM_VIDEO = 109;</code>
         */
        IM_VIDEO(15, 109),
        /**
         * <code>IM_URL = 110;</code>
         */
        IM_URL(16, 110),
        /**
         * <code>IM_LOCATION = 111;</code>
         */
        IM_LOCATION(17, 111),
        /**
         * <code>IM_LOCATION_SHARE_BEGIN = 112;</code>
         */
        IM_LOCATION_SHARE_BEGIN(18, 112),
        /**
         * <code>IM_LOCATION_SHARE_ANSWER = 113;</code>
         */
        IM_LOCATION_SHARE_ANSWER(19, 113),
        /**
         * <code>IM_LOCATION_SHARE_CONTINUE = 114;</code>
         */
        IM_LOCATION_SHARE_CONTINUE(20, 114),
        /**
         * <code>IM_LOCATION_SHARE_END = 115;</code>
         */
        IM_LOCATION_SHARE_END(21, 115),
        /**
         * <code>PHONEDIAL = 117;</code>
         */
        PHONEDIAL(22, 117),
        /**
         * <code>PHONEDIAL_ACK = 118;</code>
         */
        PHONEDIAL_ACK(23, 118),
        /**
         * <code>GET_CONTACTS_INFO = 119;</code>
         */
        GET_CONTACTS_INFO(24, 119),
        /**
         * <code>GET_CONTACTS_INFO_ACK = 120;</code>
         */
        GET_CONTACTS_INFO_ACK(25, 120),
        /**
         * <code>PHP_USER_MODIFYSTATUS = 121;</code>
         */
        PHP_USER_MODIFYSTATUS(26, 121),
        /**
         * <code>PHP_USER_MODIFYSTATUS_ACK = 122;</code>
         */
        PHP_USER_MODIFYSTATUS_ACK(27, 122),
        /**
         * <code>PHP_ADMIN_MODIFYUSERSTATUS = 123;</code>
         */
        PHP_ADMIN_MODIFYUSERSTATUS(28, 123),
        /**
         * <code>PHP_ADMIN_MODIFYUSERSTATUS_ACK = 124;</code>
         */
        PHP_ADMIN_MODIFYUSERSTATUS_ACK(29, 124),
        /**
         * <code>REQUEST_IP = 400;</code>
         * <p>
         * <pre>
         * BACKEND ONLY.
         * </pre>
         */
        REQUEST_IP(30, 400),
        /**
         * <code>REQUEST_IP_ACK = 401;</code>
         */
        REQUEST_IP_ACK(31, 401),
        /**
         * <code>REGIST_COMMUNICATIONSERVICE = 402;</code>
         * <p>
         * <pre>
         * route注册
         * </pre>
         */
        REGIST_COMMUNICATIONSERVICE(32, 402),
        /**
         * <code>REPORT_ONLINERS = 403;</code>
         */
        REPORT_ONLINERS(33, 403),
        /**
         * <code>BROATCAT_NOTIFY = 404;</code>
         */
        BROATCAT_NOTIFY(34, 404),
        /**
         * <code>ROUTE_BRAODCAST = 405;</code>
         * <p>
         * <pre>
         * route 广播
         * </pre>
         */
        ROUTE_BRAODCAST(35, 405),
        /**
         * <code>CID_USER_STAT_PUSH_REQ = 406;</code>
         * <p>
         * <pre>
         * 用户状态广播
         * </pre>
         */
        CID_USER_STAT_PUSH_REQ(36, 406),
        /**
         * <code>CID_USER_STAT_SYNC_REQ = 407;</code>
         */
        CID_USER_STAT_SYNC_REQ(37, 407),
        /**
         * <code>CID_USER_STAT_SYNC_RSP = 408;</code>
         */
        CID_USER_STAT_SYNC_RSP(38, 408),
        /**
         * <code>REGIST_RSP = 409;</code>
         */
        REGIST_RSP(39, 409),
        /**
         * <code>GENERAL_MESSAGE = 501;</code>
         */
        GENERAL_MESSAGE(40, 501),
        /**
         * <code>POP_GENERAL_MESSAGE = 502;</code>
         */
        POP_GENERAL_MESSAGE(41, 502),
        /**
         * <code>POP_GENERAL_MESSAGE_ACK = 503;</code>
         */
        POP_GENERAL_MESSAGE_ACK(42, 503),
        /**
         * <code>BULLETIN = 600;</code>
         */
        BULLETIN(43, 600),
        /**
         * <code>BULLETIN_NOTIFY = 601;</code>
         */
        BULLETIN_NOTIFY(44, 601),
        /**
         * <code>BULLETIN_PUBLISH = 605;</code>
         */
        BULLETIN_PUBLISH(45, 605),
        /**
         * <code>BULLETIN_PUBLISH_ACK = 606;</code>
         */
        BULLETIN_PUBLISH_ACK(46, 606),
        /**
         * <code>BIZCARD_GET_BYPHONE = 701;</code>
         */
        BIZCARD_GET_BYPHONE(47, 701),
        /**
         * <code>BIZCARD_GET_BYPHONE_ACK = 702;</code>
         */
        BIZCARD_GET_BYPHONE_ACK(48, 702),
        /**
         * <code>BIZCARD_INSERT = 703;</code>
         */
        BIZCARD_INSERT(49, 703),
        /**
         * <code>BIZCARD_INSERT_ACK = 704;</code>
         */
        BIZCARD_INSERT_ACK(50, 704),
        /**
         * <code>BIZCARD_UPDATE = 705;</code>
         */
        BIZCARD_UPDATE(51, 705),
        /**
         * <code>BIZCARD_UPDATE_ACK = 706;</code>
         */
        BIZCARD_UPDATE_ACK(52, 706),
        /**
         * <code>BIZCARD_DELETE = 707;</code>
         */
        BIZCARD_DELETE(53, 707),
        /**
         * <code>BIZCARD_DELETE_ACK = 708;</code>
         */
        BIZCARD_DELETE_ACK(54, 708),
        /**
         * <code>BUSINESS_QUERY_AD = 750;</code>
         * <p>
         * <pre>
         * 商家查询代言
         * </pre>
         */
        BUSINESS_QUERY_AD(55, 750),
        /**
         * <code>BUSINESS_QUERY_AD_ACK = 751;</code>
         */
        BUSINESS_QUERY_AD_ACK(56, 751),
        /**
         * <code>BUSINESS_SAVE_AD = 752;</code>
         */
        BUSINESS_SAVE_AD(57, 752),
        /**
         * <code>BUSINESS_SAVE_AD_ACK = 753;</code>
         */
        BUSINESS_SAVE_AD_ACK(58, 753),
        /**
         * <code>BUSINESS_UPDATE_AD = 754;</code>
         */
        BUSINESS_UPDATE_AD(59, 754),
        /**
         * <code>BUSINESS_UPDATE_AD_ACK = 755;</code>
         */
        BUSINESS_UPDATE_AD_ACK(60, 755),
        /**
         * <code>BUSINESS_DELETE_AD = 756;</code>
         */
        BUSINESS_DELETE_AD(61, 756),
        /**
         * <code>BUSINESS_DELETE_AD_ACK = 757;</code>
         */
        BUSINESS_DELETE_AD_ACK(62, 757),
        /**
         * <code>USERSHOWRULE_RESULT = 758;</code>
         */
        USERSHOWRULE_RESULT(63, 758),
        /**
         * <code>USERSHOWRULE_GET = 759;</code>
         */
        USERSHOWRULE_GET(64, 759),
        /**
         * <code>USERSHOWRULE_SAVE = 760;</code>
         */
        USERSHOWRULE_SAVE(65, 760),
        /**
         * <code>USERSHOWRULE_UPDATE = 761;</code>
         */
        USERSHOWRULE_UPDATE(66, 761),
        /**
         * <code>USERSHOWRULE_DELETE = 762;</code>
         */
        USERSHOWRULE_DELETE(67, 762),
        /**
         * <code>BONDERY_MQ = 10000;</code>
         * <p>
         * <pre>
         * this is the bondery for mq. outside the bondery; com service should post the request to mq.
         * </pre>
         */
        BONDERY_MQ(68, 10000),
        /**
         * <code>SYSTEM_LOG = 10001;</code>
         */
        SYSTEM_LOG(69, 10001),
        /**
         * <code>LOCATIONSHARE = 10700;</code>
         */
        LOCATIONSHARE(70, 10700),
        /**
         * <code>LOCATIONSHARE_NOTIFY = 10701;</code>
         */
        LOCATIONSHARE_NOTIFY(71, 10701),
        /**
         * <code>LOCATIONSHARE_INVIT = 10702;</code>
         */
        LOCATIONSHARE_INVIT(72, 10702),
        /**
         * <code>LOCATIONSHARE_INVIT_ACK = 10703;</code>
         */
        LOCATIONSHARE_INVIT_ACK(73, 10703),
        /**
         * <code>LOCATIONSHARE_INVIT_NOTIFY = 10704;</code>
         */
        LOCATIONSHARE_INVIT_NOTIFY(74, 10704),
        /**
         * <code>LOCATIONSHARE_JOIN = 10705;</code>
         */
        LOCATIONSHARE_JOIN(75, 10705),
        /**
         * <code>LOCATIONSHARE_JOIN_ACK = 10706;</code>
         */
        LOCATIONSHARE_JOIN_ACK(76, 10706),
        /**
         * <code>LOCATIONSHARE_JOIN_NOTIFY = 10707;</code>
         */
        LOCATIONSHARE_JOIN_NOTIFY(77, 10707),
        /**
         * <code>LOCATIONSHARE_QUIT = 10709;</code>
         */
        LOCATIONSHARE_QUIT(78, 10709),
        /**
         * <code>LOCATIONSHARE_QUIT_ACK = 10710;</code>
         */
        LOCATIONSHARE_QUIT_ACK(79, 10710),
        /**
         * <code>LOCATIONSHARE_QUIT_NOTIFY = 10711;</code>
         */
        LOCATIONSHARE_QUIT_NOTIFY(80, 10711),
        /**
         * <code>PUSH_APNS = 10801;</code>
         * <p>
         * <pre>
         * this does not guarantee successed.
         * </pre>
         */
        PUSH_APNS(81, 10801),
        /**
         * <code>PUSH_APNS_ACK = 10802;</code>
         * <p>
         * <pre>
         * and does not give you a ack.
         * </pre>
         */
        PUSH_APNS_ACK(82, 10802),
        /**
         * <code>PUSH_GENERAL = 10805;</code>
         * <p>
         * <pre>
         * Push_General
         * </pre>
         */
        PUSH_GENERAL(83, 10805),
        /**
         * <code>PUSH_SMS = 10806;</code>
         * <p>
         * <pre>
         * Push_SMS
         * </pre>
         */
        PUSH_SMS(84, 10806),
        /**
         * <code>ENDORSEMENT_TAKE = 10901;</code>
         */
        ENDORSEMENT_TAKE(85, 10901),
        /**
         * <code>ENDORSEMENT_TAKE_ACK = 10902;</code>
         */
        ENDORSEMENT_TAKE_ACK(86, 10902),
        /**
         * <code>ENDORSEMENT_QUERY = 10911;</code>
         */
        ENDORSEMENT_QUERY(87, 10911),
        /**
         * <code>ENDORSEMENT_QUERY_ACK = 10912;</code>
         */
        ENDORSEMENT_QUERY_ACK(88, 10912),
        /**
         * <code>ENDORSEMENT_DELET = 10921;</code>
         */
        ENDORSEMENT_DELET(89, 10921),
        /**
         * <code>ENDORSEMENT_DELETE_ACK = 10922;</code>
         */
        ENDORSEMENT_DELETE_ACK(90, 10922),
        /**
         * <code>ENDORSEMENT_ADMIN_QUERY = 10951;</code>
         * <p>
         * <pre>
         * 商家查询代言领取记录数据。
         * </pre>
         */
        ENDORSEMENT_ADMIN_QUERY(91, 10951),
        /**
         * <code>ENDORSEMENT_ADMIN_QUERY_ACK = 10952;</code>
         */
        ENDORSEMENT_ADMIN_QUERY_ACK(92, 10952),
        /**
         * <code>SHOWBIZ_QUERY = 11001;</code>
         */
        SHOWBIZ_QUERY(93, 11001),
        /**
         * <code>SHOWBIZ_QUERY_ACK = 11002;</code>
         */
        SHOWBIZ_QUERY_ACK(94, 11002),
        /**
         * <code>SHOWBIZ_INSERT = 11011;</code>
         */
        SHOWBIZ_INSERT(95, 11011),
        /**
         * <code>SHOWBIZ_INSERT_ACK = 11012;</code>
         */
        SHOWBIZ_INSERT_ACK(96, 11012),
        /**
         * <code>SHOWBIZ_DELETE = 11021;</code>
         */
        SHOWBIZ_DELETE(97, 11021),
        /**
         * <code>SHOWBIZ_DELETE_ACK = 11022;</code>
         */
        SHOWBIZ_DELETE_ACK(98, 11022),
        /**
         * <code>SHOWBIZ_UPDATE = 11031;</code>
         */
        SHOWBIZ_UPDATE(99, 11031),
        /**
         * <code>SHOWBIZ_UPDATE_ACK = 11032;</code>
         */
        SHOWBIZ_UPDATE_ACK(100, 11032),
        /**
         * <code>SHOWPERSONAL_QUERY = 11041;</code>
         */
        SHOWPERSONAL_QUERY(101, 11041),
        /**
         * <code>SHOWPERSONAL_QUERY_ACK = 11042;</code>
         */
        SHOWPERSONAL_QUERY_ACK(102, 11042),
        /**
         * <code>SHOWPERSONAL_INSERT = 11051;</code>
         */
        SHOWPERSONAL_INSERT(103, 11051),
        /**
         * <code>SHOWPERSONAL_INSERT_ACK = 11052;</code>
         */
        SHOWPERSONAL_INSERT_ACK(104, 11052),
        /**
         * <code>SHOWPERSONAL_UPDATE = 11061;</code>
         */
        SHOWPERSONAL_UPDATE(105, 11061),
        /**
         * <code>SHOWPERSONAL_UPDATE_ACK = 11062;</code>
         */
        SHOWPERSONAL_UPDATE_ACK(106, 11062),
        /**
         * <code>SHOWPERSONAL_DELETE = 11071;</code>
         */
        SHOWPERSONAL_DELETE(107, 11071),
        /**
         * <code>SHOWPERSONAL_DELETE_ACK = 11072;</code>
         */
        SHOWPERSONAL_DELETE_ACK(108, 11072),
        /**
         * <code>SHOWDIAL = 11081;</code>
         */
        SHOWDIAL(109, 11081),
        /**
         * <code>SHOWDIAL_ACK = 11082;</code>
         */
        SHOWDIAL_ACK(110, 11082),
        /**
         * <code>SHOWDIAL_NOTIFY = 11083;</code>
         */
        SHOWDIAL_NOTIFY(111, 11083),
        /**
         * <code>SHOWDIAL_CACHE_UPDATE_SYSTEMNOTIFY = 11091;</code>
         */
        SHOWDIAL_CACHE_UPDATE_SYSTEMNOTIFY(112, 11091),
        /**
         * <code>CID_USER_CONNECT_EXCEPT = 16401;</code>
         */
        CID_USER_CONNECT_EXCEPT(113, 16401),
        /**
         * <code>CID_USER_STATE_BROADCAST = 16657;</code>
         * <p>
         * <pre>
         * 服务端用
         * </pre>
         */
        CID_USER_STATE_BROADCAST(114, 16657),
        /**
         * <code>CID_USER_STATE_REPORT = 16658;</code>
         */
        CID_USER_STATE_REPORT(115, 16658),
        /**
         * <code>CID_MONITOR_CLIENT_REGISTER_REQ = 16913;</code>
         */
        CID_MONITOR_CLIENT_REGISTER_REQ(116, 16913),
        /**
         * <code>CID_MONITOR_CLIENT_REGISTER_RSP = 16914;</code>
         */
        CID_MONITOR_CLIENT_REGISTER_RSP(117, 16914),
        /**
         * <code>CID_MASTER_BROADCAST_SERVER_INFO = 16915;</code>
         */
        CID_MASTER_BROADCAST_SERVER_INFO(118, 16915),
        /**
         * <code>CID_S2S_AUTHENTICATION_REQ = 16916;</code>
         */
        CID_S2S_AUTHENTICATION_REQ(119, 16916),
        /**
         * <code>CID_S2S_AUTHENTICATION_RSP = 16917;</code>
         */
        CID_S2S_AUTHENTICATION_RSP(120, 16917),
        /**
         * <code>CID_S2S_PING = 16918;</code>
         */
        CID_S2S_PING(121, 16918),
        /**
         * <code>CID_S2S_PONG = 16919;</code>
         */
        CID_S2S_PONG(122, 16919),
        /**
         * <code>CID_REGISTER_CMD_REQ = 16929;</code>
         */
        CID_REGISTER_CMD_REQ(123, 16929),
        /**
         * <code>CID_CLUSTER_STATUS_REQ = 17185;</code>
         */
        CID_CLUSTER_STATUS_REQ(124, 17185),
        /**
         * <code>CID_CLUSTER_STATUS_RSP = 17186;</code>
         */
        CID_CLUSTER_STATUS_RSP(125, 17186),
        /**
         * <code>CID_CONFIG_SET_REQ = 17190;</code>
         */
        CID_CONFIG_SET_REQ(126, 17190),
        /**
         * <code>CID_CONFIG_SET_RSP = 17191;</code>
         */
        CID_CONFIG_SET_RSP(127, 17191),
        /**
         * <code>CID_CHAT_BUDDY = 20497;</code>
         * <p>
         * <pre>
         * 客户端cmd
         * 消息 cmd
         * </pre>
         */
        CID_CHAT_BUDDY(128, 20497),
        /**
         * <code>CID_CHAT_GROUP = 20498;</code>
         */
        CID_CHAT_GROUP(129, 20498),
        /**
         * <code>CID_OFFLINE_MSG_NOTIFY = 20499;</code>
         */
        CID_OFFLINE_MSG_NOTIFY(130, 20499),
        /**
         * <code>CID_CHAT_MSG_ACK = 20500;</code>
         */
        CID_CHAT_MSG_ACK(131, 20500),
        /**
         * <code>CID_PUSH_MSG = 20501;</code>
         */
        CID_PUSH_MSG(132, 20501),
        /**
         * <code>CID_PUSH_MSG_ACK = 20502;</code>
         */
        CID_PUSH_MSG_ACK(133, 20502),
        /**
         * <code>CID_CHAT_CUSTOMER_SERVICES = 20759;</code>
         * <p>
         * <pre>
         * 智能呼叫
         * </pre>
         */
        CID_CHAT_CUSTOMER_SERVICES(134, 20759),
        /**
         * <code>CID_CHAT_MACHINE = 20760;</code>
         */
        CID_CHAT_MACHINE(135, 20760),
        /**
         * <code>CID_GROUP_LIST_REQ = 24593;</code>
         * <p>
         * <pre>
         * 群
         * </pre>
         */
        CID_GROUP_LIST_REQ(136, 24593),
        /**
         * <code>CID_GROUP_LIST_RSP = 24594;</code>
         */
        CID_GROUP_LIST_RSP(137, 24594),
        /**
         * <code>CID_GROUP_INFO_REQ = 24595;</code>
         */
        CID_GROUP_INFO_REQ(138, 24595),
        /**
         * <code>CID_GROUP_INFO_RSP = 24596;</code>
         */
        CID_GROUP_INFO_RSP(139, 24596),
        /**
         * <code>CID_GROUP_MEMBER_REQ = 24597;</code>
         */
        CID_GROUP_MEMBER_REQ(140, 24597),
        /**
         * <code>CID_GROUP_MEMBER_RSP = 24598;</code>
         */
        CID_GROUP_MEMBER_RSP(141, 24598),
        /**
         * <code>CID_GROUP_CREATE_REQ = 24599;</code>
         */
        CID_GROUP_CREATE_REQ(142, 24599),
        /**
         * <code>CID_GROUP_CREATE_RSP = 24600;</code>
         */
        CID_GROUP_CREATE_RSP(143, 24600),
        /**
         * <code>CID_GROUP_DISSOLVE_REQ = 24601;</code>
         */
        CID_GROUP_DISSOLVE_REQ(144, 24601),
        /**
         * <code>CID_GROUP_DISSOLVE_RSP = 24602;</code>
         */
        CID_GROUP_DISSOLVE_RSP(145, 24602),
        /**
         * <code>CID_GROUP_INFO_MODIFY_REQ = 24603;</code>
         */
        CID_GROUP_INFO_MODIFY_REQ(146, 24603),
        /**
         * <code>CID_GROUP_INFO_MODIFY_RSP = 24604;</code>
         */
        CID_GROUP_INFO_MODIFY_RSP(147, 24604),
        /**
         * <code>CID_GROUP_CHANGE_MEMBER_REQ = 24605;</code>
         */
        CID_GROUP_CHANGE_MEMBER_REQ(148, 24605),
        /**
         * <code>CID_GROUP_CHANGE_MEMBER_RSP = 24606;</code>
         */
        CID_GROUP_CHANGE_MEMBER_RSP(149, 24606),
        /**
         * <code>CID_GROUP_OPT_NOTIFY = 24609;</code>
         * <p>
         * <pre>
         * notify
         * </pre>
         */
        CID_GROUP_OPT_NOTIFY(150, 24609),
        /**
         * <code>CID_GROUP_CHANGE_MEMBER_NOTIFY = 24611;</code>
         */
        CID_GROUP_CHANGE_MEMBER_NOTIFY(151, 24611),
        /**
         * <code>CID_GROUP_INFO_MODIFY__NOTIFY = 24612;</code>
         */
        CID_GROUP_INFO_MODIFY__NOTIFY(152, 24612),
        /**
         * <code>CID_GROUP_CHANGE_MEMBER_TRANSFER_REQ = 24624;</code>
         */
        CID_GROUP_CHANGE_MEMBER_TRANSFER_REQ(153, 24624),
        /**
         * <code>CID_GROUP_CHANGE_MEMBER_TRANSFER_RSP = 24625;</code>
         */
        CID_GROUP_CHANGE_MEMBER_TRANSFER_RSP(154, 24625),
        /**
         * <code>CID_GROUP_SET_REQ = 24626;</code>
         */
        CID_GROUP_SET_REQ(155, 24626),
        /**
         * <code>CID_GROUP_SET_RSP = 24627;</code>
         */
        CID_GROUP_SET_RSP(156, 24627),
        /**
         * <code>S2S_GROUP_CHANGE_RSP = 24628;</code>
         */
        S2S_GROUP_CHANGE_RSP(157, 24628),
        /**
         * <code>CID_ORG_LIST_REQ = 24849;</code>
         * <p>
         * <pre>
         * 组织架构
         * </pre>
         */
        CID_ORG_LIST_REQ(158, 24849),
        /**
         * <code>CID_ORG_LIST_RSP = 24850;</code>
         */
        CID_ORG_LIST_RSP(159, 24850),
        /**
         * <code>CID_GMSG_OFFLINE_MSG_NOTIFY = 25122;</code>
         */
        CID_GMSG_OFFLINE_MSG_NOTIFY(160, 25122),
        /**
         * <code>CID_MSG_DATA_LIST_REQ = 25123;</code>
         * <p>
         * <pre>
         * 历史消息
         * </pre>
         */
        CID_MSG_DATA_LIST_REQ(161, 25123),
        /**
         * <code>CID_MSG_DATA_LIST_RSP = 25124;</code>
         */
        CID_MSG_DATA_LIST_RSP(162, 25124),
        /**
         * <code>CID_GROUP_CHAT_MSG_CANCEL = 25125;</code>
         */
        CID_GROUP_CHAT_MSG_CANCEL(163, 25125),
        /**
         * <code>CID_GMSG_OFFLINE_MSG_ACK = 25126;</code>
         */
        CID_GMSG_OFFLINE_MSG_ACK(164, 25126),
        /**
         * <code>CID_S2S_CHAT_MSG = 25361;</code>
         * <p>
         * <pre>
         * server to server 仅用于服务器间
         * </pre>
         */
        CID_S2S_CHAT_MSG(165, 25361),
        /**
         * <code>CID_S2S_GROUP_MEMBER_REQ = 25362;</code>
         */
        CID_S2S_GROUP_MEMBER_REQ(166, 25362),
        /**
         * <code>CID_S2S_GROUP_MEMBER_RSP = 25363;</code>
         */
        CID_S2S_GROUP_MEMBER_RSP(167, 25363),
        /**
         * <code>CID_S2S_BUDDY_LIST_REQ = 25364;</code>
         */
        CID_S2S_BUDDY_LIST_REQ(168, 25364),
        /**
         * <code>CID_S2S_BUDDY_LIST_RSP = 25365;</code>
         */
        CID_S2S_BUDDY_LIST_RSP(169, 25365),
        /**
         * <code>CID_USER_INFO_REQ = 28689;</code>
         * <p>
         * <pre>
         * 用户资料
         * </pre>
         */
        CID_USER_INFO_REQ(170, 28689),
        /**
         * <code>CID_USER_INFO_RSP = 28690;</code>
         */
        CID_USER_INFO_RSP(171, 28690),
        /**
         * <code>CID_USER_INFO_OPT_REQ = 28691;</code>
         */
        CID_USER_INFO_OPT_REQ(172, 28691),
        /**
         * <code>CID_USER_INFO_OPT_RSP = 28692;</code>
         */
        CID_USER_INFO_OPT_RSP(173, 28692),
        /**
         * <code>CID_BUDDY_LIST_SINGLE_USER_INFO_REQ = 29191;</code>
         * <p>
         * <pre>
         * 好友命令
         * </pre>
         */
        CID_BUDDY_LIST_SINGLE_USER_INFO_REQ(174, 29191),
        /**
         * <code>CID_BUDDY_LIST_USER_INFO_RSP = 29192;</code>
         */
        CID_BUDDY_LIST_USER_INFO_RSP(175, 29192),
        /**
         * <code>CID_BUDDY_LIST_CHANGE_AVATAR_REQ = 29199;</code>
         * <p>
         * <pre>
         * 头像修改
         * </pre>
         */
        CID_BUDDY_LIST_CHANGE_AVATAR_REQ(176, 29199),
        /**
         * <code>CID_BUDDY_LIST_CHANGE_AVATAR_RSP = 29200;</code>
         */
        CID_BUDDY_LIST_CHANGE_AVATAR_RSP(177, 29200),
        /**
         * <code>CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQ = 29202;</code>
         * <p>
         * <pre>
         * 修改个性签名
         * </pre>
         */
        CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQ(178, 29202),
        /**
         * <code>CID_BUDDY_LIST_CHANGE_SIGN_INFO_RSP = 29203;</code>
         */
        CID_BUDDY_LIST_CHANGE_SIGN_INFO_RSP(179, 29203),
        /**
         * <code>CID_BUDDY_LIST_MODIFY_USER_INFO_REQ = 29204;</code>
         * <p>
         * <pre>
         * 修改个人信息
         * </pre>
         */
        CID_BUDDY_LIST_MODIFY_USER_INFO_REQ(180, 29204),
        /**
         * <code>CID_BUDDY_LIST_MODIFY_USER_INFO_RSP = 29205;</code>
         */
        CID_BUDDY_LIST_MODIFY_USER_INFO_RSP(181, 29205),
        /**
         * <code>CID_BUDDY_LIST_OPT_REQ = 29206;</code>
         * <p>
         * <pre>
         * 好友操作（add or delete）
         * </pre>
         */
        CID_BUDDY_LIST_OPT_REQ(182, 29206),
        /**
         * <code>CID_BUDDY_LIST_OPT_RSP = 29207;</code>
         */
        CID_BUDDY_LIST_OPT_RSP(183, 29207),
        /**
         * <code>CID_BUDDY_LIST_MODIFY_NICKNAME_REQ = 29208;</code>
         * <p>
         * <pre>
         * 修改好友备注
         * </pre>
         */
        CID_BUDDY_LIST_MODIFY_NICKNAME_REQ(184, 29208),
        /**
         * <code>CID_BUDDY_LIST_MODIFY_NICKNAME_RSP = 29209;</code>
         */
        CID_BUDDY_LIST_MODIFY_NICKNAME_RSP(185, 29209),
        /**
         * <code>CID_BUDDY_LIST_REQ = 29210;</code>
         * <p>
         * <pre>
         * 获取好友请求列表
         * </pre>
         */
        CID_BUDDY_LIST_REQ(186, 29210),
        /**
         * <code>CID_BUDDY_LIST_RSP = 29211;</code>
         */
        CID_BUDDY_LIST_RSP(187, 29211),
        /**
         * <code>CID_BUDDY_LIST_OPT_RESULT = 29212;</code>
         */
        CID_BUDDY_LIST_OPT_RESULT(188, 29212),
        /**
         * <code>CID_CONTACT_COLLECTION_REQ = 29217;</code>
         */
        CID_CONTACT_COLLECTION_REQ(189, 29217),
        /**
         * <code>CID_CONTACT_COLLECTION_RSP = 29218;</code>
         */
        CID_CONTACT_COLLECTION_RSP(190, 29218),
        /**
         * <code>CID_BUDDY_LIST_OPT_NOTIFY = 29219;</code>
         * <p>
         * <pre>
         * 好友操作通知
         * </pre>
         */
        CID_BUDDY_LIST_OPT_NOTIFY(191, 29219),;

        /**
         * <code>HEART_BEAT = 1;</code>
         */
        public static final int HEART_BEAT_VALUE = 1;
        /**
         * <code>HEART_BEAT_ACK = 2;</code>
         */
        public static final int HEART_BEAT_ACK_VALUE = 2;
        /**
         * <code>ROUTE_REQ = 20;</code>
         */
        public static final int ROUTE_REQ_VALUE = 20;
        /**
         * <code>ROUTE_ONLINECHECK = 21;</code>
         */
        public static final int ROUTE_ONLINECHECK_VALUE = 21;
        /**
         * <code>ROUTE_ONLINECHECK_ACK = 22;</code>
         */
        public static final int ROUTE_ONLINECHECK_ACK_VALUE = 22;
        /**
         * <code>ROUTE_PHONE_CHECK = 23;</code>
         */
        public static final int ROUTE_PHONE_CHECK_VALUE = 23;
        /**
         * <code>ROUTE_PHONE_CHECK_ACK = 24;</code>
         */
        public static final int ROUTE_PHONE_CHECK_ACK_VALUE = 24;
        /**
         * <code>USER_LOGIN = 101;</code>
         */
        public static final int USER_LOGIN_VALUE = 101;
        /**
         * <code>USER_LOGIN_ACK = 102;</code>
         */
        public static final int USER_LOGIN_ACK_VALUE = 102;
        /**
         * <code>USER_LOGOFF = 103;</code>
         */
        public static final int USER_LOGOFF_VALUE = 103;
        /**
         * <code>USER_LOGOFF_ACK = 104;</code>
         */
        public static final int USER_LOGOFF_ACK_VALUE = 104;
        /**
         * <code>MULTI_DEVICE_KICKED_NOTIFY = 105;</code>
         */
        public static final int MULTI_DEVICE_KICKED_NOTIFY_VALUE = 105;
        /**
         * <code>IM_TEXT = 106;</code>
         */
        public static final int IM_TEXT_VALUE = 106;
        /**
         * <code>IM_PICTURE = 107;</code>
         */
        public static final int IM_PICTURE_VALUE = 107;
        /**
         * <code>IM_AUDIO = 108;</code>
         */
        public static final int IM_AUDIO_VALUE = 108;
        /**
         * <code>IM_VIDEO = 109;</code>
         */
        public static final int IM_VIDEO_VALUE = 109;
        /**
         * <code>IM_URL = 110;</code>
         */
        public static final int IM_URL_VALUE = 110;
        /**
         * <code>IM_LOCATION = 111;</code>
         */
        public static final int IM_LOCATION_VALUE = 111;
        /**
         * <code>IM_LOCATION_SHARE_BEGIN = 112;</code>
         */
        public static final int IM_LOCATION_SHARE_BEGIN_VALUE = 112;
        /**
         * <code>IM_LOCATION_SHARE_ANSWER = 113;</code>
         */
        public static final int IM_LOCATION_SHARE_ANSWER_VALUE = 113;
        /**
         * <code>IM_LOCATION_SHARE_CONTINUE = 114;</code>
         */
        public static final int IM_LOCATION_SHARE_CONTINUE_VALUE = 114;
        /**
         * <code>IM_LOCATION_SHARE_END = 115;</code>
         */
        public static final int IM_LOCATION_SHARE_END_VALUE = 115;
        /**
         * <code>PHONEDIAL = 117;</code>
         */
        public static final int PHONEDIAL_VALUE = 117;
        /**
         * <code>PHONEDIAL_ACK = 118;</code>
         */
        public static final int PHONEDIAL_ACK_VALUE = 118;
        /**
         * <code>GET_CONTACTS_INFO = 119;</code>
         */
        public static final int GET_CONTACTS_INFO_VALUE = 119;
        /**
         * <code>GET_CONTACTS_INFO_ACK = 120;</code>
         */
        public static final int GET_CONTACTS_INFO_ACK_VALUE = 120;
        /**
         * <code>PHP_USER_MODIFYSTATUS = 121;</code>
         */
        public static final int PHP_USER_MODIFYSTATUS_VALUE = 121;
        /**
         * <code>PHP_USER_MODIFYSTATUS_ACK = 122;</code>
         */
        public static final int PHP_USER_MODIFYSTATUS_ACK_VALUE = 122;
        /**
         * <code>PHP_ADMIN_MODIFYUSERSTATUS = 123;</code>
         */
        public static final int PHP_ADMIN_MODIFYUSERSTATUS_VALUE = 123;
        /**
         * <code>PHP_ADMIN_MODIFYUSERSTATUS_ACK = 124;</code>
         */
        public static final int PHP_ADMIN_MODIFYUSERSTATUS_ACK_VALUE = 124;
        /**
         * <code>REQUEST_IP = 400;</code>
         * <p>
         * <pre>
         * BACKEND ONLY.
         * </pre>
         */
        public static final int REQUEST_IP_VALUE = 400;
        /**
         * <code>REQUEST_IP_ACK = 401;</code>
         */
        public static final int REQUEST_IP_ACK_VALUE = 401;
        /**
         * <code>REGIST_COMMUNICATIONSERVICE = 402;</code>
         * <p>
         * <pre>
         * route注册
         * </pre>
         */
        public static final int REGIST_COMMUNICATIONSERVICE_VALUE = 402;
        /**
         * <code>REPORT_ONLINERS = 403;</code>
         */
        public static final int REPORT_ONLINERS_VALUE = 403;
        /**
         * <code>BROATCAT_NOTIFY = 404;</code>
         */
        public static final int BROATCAT_NOTIFY_VALUE = 404;
        /**
         * <code>ROUTE_BRAODCAST = 405;</code>
         * <p>
         * <pre>
         * route 广播
         * </pre>
         */
        public static final int ROUTE_BRAODCAST_VALUE = 405;
        /**
         * <code>CID_USER_STAT_PUSH_REQ = 406;</code>
         * <p>
         * <pre>
         * 用户状态广播
         * </pre>
         */
        public static final int CID_USER_STAT_PUSH_REQ_VALUE = 406;
        /**
         * <code>CID_USER_STAT_SYNC_REQ = 407;</code>
         */
        public static final int CID_USER_STAT_SYNC_REQ_VALUE = 407;
        /**
         * <code>CID_USER_STAT_SYNC_RSP = 408;</code>
         */
        public static final int CID_USER_STAT_SYNC_RSP_VALUE = 408;
        /**
         * <code>REGIST_RSP = 409;</code>
         */
        public static final int REGIST_RSP_VALUE = 409;
        /**
         * <code>GENERAL_MESSAGE = 501;</code>
         */
        public static final int GENERAL_MESSAGE_VALUE = 501;
        /**
         * <code>POP_GENERAL_MESSAGE = 502;</code>
         */
        public static final int POP_GENERAL_MESSAGE_VALUE = 502;
        /**
         * <code>POP_GENERAL_MESSAGE_ACK = 503;</code>
         */
        public static final int POP_GENERAL_MESSAGE_ACK_VALUE = 503;
        /**
         * <code>BULLETIN = 600;</code>
         */
        public static final int BULLETIN_VALUE = 600;
        /**
         * <code>BULLETIN_NOTIFY = 601;</code>
         */
        public static final int BULLETIN_NOTIFY_VALUE = 601;
        /**
         * <code>BULLETIN_PUBLISH = 605;</code>
         */
        public static final int BULLETIN_PUBLISH_VALUE = 605;
        /**
         * <code>BULLETIN_PUBLISH_ACK = 606;</code>
         */
        public static final int BULLETIN_PUBLISH_ACK_VALUE = 606;
        /**
         * <code>BIZCARD_GET_BYPHONE = 701;</code>
         */
        public static final int BIZCARD_GET_BYPHONE_VALUE = 701;
        /**
         * <code>BIZCARD_GET_BYPHONE_ACK = 702;</code>
         */
        public static final int BIZCARD_GET_BYPHONE_ACK_VALUE = 702;
        /**
         * <code>BIZCARD_INSERT = 703;</code>
         */
        public static final int BIZCARD_INSERT_VALUE = 703;
        /**
         * <code>BIZCARD_INSERT_ACK = 704;</code>
         */
        public static final int BIZCARD_INSERT_ACK_VALUE = 704;
        /**
         * <code>BIZCARD_UPDATE = 705;</code>
         */
        public static final int BIZCARD_UPDATE_VALUE = 705;
        /**
         * <code>BIZCARD_UPDATE_ACK = 706;</code>
         */
        public static final int BIZCARD_UPDATE_ACK_VALUE = 706;
        /**
         * <code>BIZCARD_DELETE = 707;</code>
         */
        public static final int BIZCARD_DELETE_VALUE = 707;
        /**
         * <code>BIZCARD_DELETE_ACK = 708;</code>
         */
        public static final int BIZCARD_DELETE_ACK_VALUE = 708;
        /**
         * <code>BUSINESS_QUERY_AD = 750;</code>
         * <p>
         * <pre>
         * 商家查询代言
         * </pre>
         */
        public static final int BUSINESS_QUERY_AD_VALUE = 750;
        /**
         * <code>BUSINESS_QUERY_AD_ACK = 751;</code>
         */
        public static final int BUSINESS_QUERY_AD_ACK_VALUE = 751;
        /**
         * <code>BUSINESS_SAVE_AD = 752;</code>
         */
        public static final int BUSINESS_SAVE_AD_VALUE = 752;
        /**
         * <code>BUSINESS_SAVE_AD_ACK = 753;</code>
         */
        public static final int BUSINESS_SAVE_AD_ACK_VALUE = 753;
        /**
         * <code>BUSINESS_UPDATE_AD = 754;</code>
         */
        public static final int BUSINESS_UPDATE_AD_VALUE = 754;
        /**
         * <code>BUSINESS_UPDATE_AD_ACK = 755;</code>
         */
        public static final int BUSINESS_UPDATE_AD_ACK_VALUE = 755;
        /**
         * <code>BUSINESS_DELETE_AD = 756;</code>
         */
        public static final int BUSINESS_DELETE_AD_VALUE = 756;
        /**
         * <code>BUSINESS_DELETE_AD_ACK = 757;</code>
         */
        public static final int BUSINESS_DELETE_AD_ACK_VALUE = 757;
        /**
         * <code>USERSHOWRULE_RESULT = 758;</code>
         */
        public static final int USERSHOWRULE_RESULT_VALUE = 758;
        /**
         * <code>USERSHOWRULE_GET = 759;</code>
         */
        public static final int USERSHOWRULE_GET_VALUE = 759;
        /**
         * <code>USERSHOWRULE_SAVE = 760;</code>
         */
        public static final int USERSHOWRULE_SAVE_VALUE = 760;
        /**
         * <code>USERSHOWRULE_UPDATE = 761;</code>
         */
        public static final int USERSHOWRULE_UPDATE_VALUE = 761;
        /**
         * <code>USERSHOWRULE_DELETE = 762;</code>
         */
        public static final int USERSHOWRULE_DELETE_VALUE = 762;
        /**
         * <code>BONDERY_MQ = 10000;</code>
         * <p>
         * <pre>
         * this is the bondery for mq. outside the bondery; com service should post the request to mq.
         * </pre>
         */
        public static final int BONDERY_MQ_VALUE = 10000;
        /**
         * <code>SYSTEM_LOG = 10001;</code>
         */
        public static final int SYSTEM_LOG_VALUE = 10001;
        /**
         * <code>LOCATIONSHARE = 10700;</code>
         */
        public static final int LOCATIONSHARE_VALUE = 10700;
        /**
         * <code>LOCATIONSHARE_NOTIFY = 10701;</code>
         */
        public static final int LOCATIONSHARE_NOTIFY_VALUE = 10701;
        /**
         * <code>LOCATIONSHARE_INVIT = 10702;</code>
         */
        public static final int LOCATIONSHARE_INVIT_VALUE = 10702;
        /**
         * <code>LOCATIONSHARE_INVIT_ACK = 10703;</code>
         */
        public static final int LOCATIONSHARE_INVIT_ACK_VALUE = 10703;
        /**
         * <code>LOCATIONSHARE_INVIT_NOTIFY = 10704;</code>
         */
        public static final int LOCATIONSHARE_INVIT_NOTIFY_VALUE = 10704;
        /**
         * <code>LOCATIONSHARE_JOIN = 10705;</code>
         */
        public static final int LOCATIONSHARE_JOIN_VALUE = 10705;
        /**
         * <code>LOCATIONSHARE_JOIN_ACK = 10706;</code>
         */
        public static final int LOCATIONSHARE_JOIN_ACK_VALUE = 10706;
        /**
         * <code>LOCATIONSHARE_JOIN_NOTIFY = 10707;</code>
         */
        public static final int LOCATIONSHARE_JOIN_NOTIFY_VALUE = 10707;
        /**
         * <code>LOCATIONSHARE_QUIT = 10709;</code>
         */
        public static final int LOCATIONSHARE_QUIT_VALUE = 10709;
        /**
         * <code>LOCATIONSHARE_QUIT_ACK = 10710;</code>
         */
        public static final int LOCATIONSHARE_QUIT_ACK_VALUE = 10710;
        /**
         * <code>LOCATIONSHARE_QUIT_NOTIFY = 10711;</code>
         */
        public static final int LOCATIONSHARE_QUIT_NOTIFY_VALUE = 10711;
        /**
         * <code>PUSH_APNS = 10801;</code>
         * <p>
         * <pre>
         * this does not guarantee successed.
         * </pre>
         */
        public static final int PUSH_APNS_VALUE = 10801;
        /**
         * <code>PUSH_APNS_ACK = 10802;</code>
         * <p>
         * <pre>
         * and does not give you a ack.
         * </pre>
         */
        public static final int PUSH_APNS_ACK_VALUE = 10802;
        /**
         * <code>PUSH_GENERAL = 10805;</code>
         * <p>
         * <pre>
         * Push_General
         * </pre>
         */
        public static final int PUSH_GENERAL_VALUE = 10805;
        /**
         * <code>PUSH_SMS = 10806;</code>
         * <p>
         * <pre>
         * Push_SMS
         * </pre>
         */
        public static final int PUSH_SMS_VALUE = 10806;
        /**
         * <code>ENDORSEMENT_TAKE = 10901;</code>
         */
        public static final int ENDORSEMENT_TAKE_VALUE = 10901;
        /**
         * <code>ENDORSEMENT_TAKE_ACK = 10902;</code>
         */
        public static final int ENDORSEMENT_TAKE_ACK_VALUE = 10902;
        /**
         * <code>ENDORSEMENT_QUERY = 10911;</code>
         */
        public static final int ENDORSEMENT_QUERY_VALUE = 10911;
        /**
         * <code>ENDORSEMENT_QUERY_ACK = 10912;</code>
         */
        public static final int ENDORSEMENT_QUERY_ACK_VALUE = 10912;
        /**
         * <code>ENDORSEMENT_DELET = 10921;</code>
         */
        public static final int ENDORSEMENT_DELET_VALUE = 10921;
        /**
         * <code>ENDORSEMENT_DELETE_ACK = 10922;</code>
         */
        public static final int ENDORSEMENT_DELETE_ACK_VALUE = 10922;
        /**
         * <code>ENDORSEMENT_ADMIN_QUERY = 10951;</code>
         * <p>
         * <pre>
         * 商家查询代言领取记录数据。
         * </pre>
         */
        public static final int ENDORSEMENT_ADMIN_QUERY_VALUE = 10951;
        /**
         * <code>ENDORSEMENT_ADMIN_QUERY_ACK = 10952;</code>
         */
        public static final int ENDORSEMENT_ADMIN_QUERY_ACK_VALUE = 10952;
        /**
         * <code>SHOWBIZ_QUERY = 11001;</code>
         */
        public static final int SHOWBIZ_QUERY_VALUE = 11001;
        /**
         * <code>SHOWBIZ_QUERY_ACK = 11002;</code>
         */
        public static final int SHOWBIZ_QUERY_ACK_VALUE = 11002;
        /**
         * <code>SHOWBIZ_INSERT = 11011;</code>
         */
        public static final int SHOWBIZ_INSERT_VALUE = 11011;
        /**
         * <code>SHOWBIZ_INSERT_ACK = 11012;</code>
         */
        public static final int SHOWBIZ_INSERT_ACK_VALUE = 11012;
        /**
         * <code>SHOWBIZ_DELETE = 11021;</code>
         */
        public static final int SHOWBIZ_DELETE_VALUE = 11021;
        /**
         * <code>SHOWBIZ_DELETE_ACK = 11022;</code>
         */
        public static final int SHOWBIZ_DELETE_ACK_VALUE = 11022;
        /**
         * <code>SHOWBIZ_UPDATE = 11031;</code>
         */
        public static final int SHOWBIZ_UPDATE_VALUE = 11031;
        /**
         * <code>SHOWBIZ_UPDATE_ACK = 11032;</code>
         */
        public static final int SHOWBIZ_UPDATE_ACK_VALUE = 11032;
        /**
         * <code>SHOWPERSONAL_QUERY = 11041;</code>
         */
        public static final int SHOWPERSONAL_QUERY_VALUE = 11041;
        /**
         * <code>SHOWPERSONAL_QUERY_ACK = 11042;</code>
         */
        public static final int SHOWPERSONAL_QUERY_ACK_VALUE = 11042;
        /**
         * <code>SHOWPERSONAL_INSERT = 11051;</code>
         */
        public static final int SHOWPERSONAL_INSERT_VALUE = 11051;
        /**
         * <code>SHOWPERSONAL_INSERT_ACK = 11052;</code>
         */
        public static final int SHOWPERSONAL_INSERT_ACK_VALUE = 11052;
        /**
         * <code>SHOWPERSONAL_UPDATE = 11061;</code>
         */
        public static final int SHOWPERSONAL_UPDATE_VALUE = 11061;
        /**
         * <code>SHOWPERSONAL_UPDATE_ACK = 11062;</code>
         */
        public static final int SHOWPERSONAL_UPDATE_ACK_VALUE = 11062;
        /**
         * <code>SHOWPERSONAL_DELETE = 11071;</code>
         */
        public static final int SHOWPERSONAL_DELETE_VALUE = 11071;
        /**
         * <code>SHOWPERSONAL_DELETE_ACK = 11072;</code>
         */
        public static final int SHOWPERSONAL_DELETE_ACK_VALUE = 11072;
        /**
         * <code>SHOWDIAL = 11081;</code>
         */
        public static final int SHOWDIAL_VALUE = 11081;
        /**
         * <code>SHOWDIAL_ACK = 11082;</code>
         */
        public static final int SHOWDIAL_ACK_VALUE = 11082;
        /**
         * <code>SHOWDIAL_NOTIFY = 11083;</code>
         */
        public static final int SHOWDIAL_NOTIFY_VALUE = 11083;
        /**
         * <code>SHOWDIAL_CACHE_UPDATE_SYSTEMNOTIFY = 11091;</code>
         */
        public static final int SHOWDIAL_CACHE_UPDATE_SYSTEMNOTIFY_VALUE = 11091;
        /**
         * <code>CID_USER_CONNECT_EXCEPT = 16401;</code>
         */
        public static final int CID_USER_CONNECT_EXCEPT_VALUE = 16401;
        /**
         * <code>CID_USER_STATE_BROADCAST = 16657;</code>
         * <p>
         * <pre>
         * 服务端用
         * </pre>
         */
        public static final int CID_USER_STATE_BROADCAST_VALUE = 16657;
        /**
         * <code>CID_USER_STATE_REPORT = 16658;</code>
         */
        public static final int CID_USER_STATE_REPORT_VALUE = 16658;
        /**
         * <code>CID_MONITOR_CLIENT_REGISTER_REQ = 16913;</code>
         */
        public static final int CID_MONITOR_CLIENT_REGISTER_REQ_VALUE = 16913;
        /**
         * <code>CID_MONITOR_CLIENT_REGISTER_RSP = 16914;</code>
         */
        public static final int CID_MONITOR_CLIENT_REGISTER_RSP_VALUE = 16914;
        /**
         * <code>CID_MASTER_BROADCAST_SERVER_INFO = 16915;</code>
         */
        public static final int CID_MASTER_BROADCAST_SERVER_INFO_VALUE = 16915;
        /**
         * <code>CID_S2S_AUTHENTICATION_REQ = 16916;</code>
         */
        public static final int CID_S2S_AUTHENTICATION_REQ_VALUE = 16916;
        /**
         * <code>CID_S2S_AUTHENTICATION_RSP = 16917;</code>
         */
        public static final int CID_S2S_AUTHENTICATION_RSP_VALUE = 16917;
        /**
         * <code>CID_S2S_PING = 16918;</code>
         */
        public static final int CID_S2S_PING_VALUE = 16918;
        /**
         * <code>CID_S2S_PONG = 16919;</code>
         */
        public static final int CID_S2S_PONG_VALUE = 16919;
        /**
         * <code>CID_REGISTER_CMD_REQ = 16929;</code>
         */
        public static final int CID_REGISTER_CMD_REQ_VALUE = 16929;
        /**
         * <code>CID_CLUSTER_STATUS_REQ = 17185;</code>
         */
        public static final int CID_CLUSTER_STATUS_REQ_VALUE = 17185;
        /**
         * <code>CID_CLUSTER_STATUS_RSP = 17186;</code>
         */
        public static final int CID_CLUSTER_STATUS_RSP_VALUE = 17186;
        /**
         * <code>CID_CONFIG_SET_REQ = 17190;</code>
         */
        public static final int CID_CONFIG_SET_REQ_VALUE = 17190;
        /**
         * <code>CID_CONFIG_SET_RSP = 17191;</code>
         */
        public static final int CID_CONFIG_SET_RSP_VALUE = 17191;
        /**
         * <code>CID_CHAT_BUDDY = 20497;</code>
         * <p>
         * <pre>
         * 客户端cmd
         * 消息 cmd
         * </pre>
         */
        public static final int CID_CHAT_BUDDY_VALUE = 20497;
        /**
         * <code>CID_CHAT_GROUP = 20498;</code>
         */
        public static final int CID_CHAT_GROUP_VALUE = 20498;
        /**
         * <code>CID_OFFLINE_MSG_NOTIFY = 20499;</code>
         */
        public static final int CID_OFFLINE_MSG_NOTIFY_VALUE = 20499;
        /**
         * <code>CID_CHAT_MSG_ACK = 20500;</code>
         */
        public static final int CID_CHAT_MSG_ACK_VALUE = 20500;
        /**
         * <code>CID_PUSH_MSG = 20501;</code>
         */
        public static final int CID_PUSH_MSG_VALUE = 20501;
        /**
         * <code>CID_PUSH_MSG_ACK = 20502;</code>
         */
        public static final int CID_PUSH_MSG_ACK_VALUE = 20502;
        /**
         * <code>CID_CHAT_CUSTOMER_SERVICES = 20759;</code>
         * <p>
         * <pre>
         * 智能呼叫
         * </pre>
         */
        public static final int CID_CHAT_CUSTOMER_SERVICES_VALUE = 20759;
        /**
         * <code>CID_CHAT_MACHINE = 20760;</code>
         */
        public static final int CID_CHAT_MACHINE_VALUE = 20760;
        /**
         * <code>CID_GROUP_LIST_REQ = 24593;</code>
         * <p>
         * <pre>
         * 群
         * </pre>
         */
        public static final int CID_GROUP_LIST_REQ_VALUE = 24593;
        /**
         * <code>CID_GROUP_LIST_RSP = 24594;</code>
         */
        public static final int CID_GROUP_LIST_RSP_VALUE = 24594;
        /**
         * <code>CID_GROUP_INFO_REQ = 24595;</code>
         */
        public static final int CID_GROUP_INFO_REQ_VALUE = 24595;
        /**
         * <code>CID_GROUP_INFO_RSP = 24596;</code>
         */
        public static final int CID_GROUP_INFO_RSP_VALUE = 24596;
        /**
         * <code>CID_GROUP_MEMBER_REQ = 24597;</code>
         */
        public static final int CID_GROUP_MEMBER_REQ_VALUE = 24597;
        /**
         * <code>CID_GROUP_MEMBER_RSP = 24598;</code>
         */
        public static final int CID_GROUP_MEMBER_RSP_VALUE = 24598;
        /**
         * <code>CID_GROUP_CREATE_REQ = 24599;</code>
         */
        public static final int CID_GROUP_CREATE_REQ_VALUE = 24599;
        /**
         * <code>CID_GROUP_CREATE_RSP = 24600;</code>
         */
        public static final int CID_GROUP_CREATE_RSP_VALUE = 24600;
        /**
         * <code>CID_GROUP_DISSOLVE_REQ = 24601;</code>
         */
        public static final int CID_GROUP_DISSOLVE_REQ_VALUE = 24601;
        /**
         * <code>CID_GROUP_DISSOLVE_RSP = 24602;</code>
         */
        public static final int CID_GROUP_DISSOLVE_RSP_VALUE = 24602;
        /**
         * <code>CID_GROUP_INFO_MODIFY_REQ = 24603;</code>
         */
        public static final int CID_GROUP_INFO_MODIFY_REQ_VALUE = 24603;
        /**
         * <code>CID_GROUP_INFO_MODIFY_RSP = 24604;</code>
         */
        public static final int CID_GROUP_INFO_MODIFY_RSP_VALUE = 24604;
        /**
         * <code>CID_GROUP_CHANGE_MEMBER_REQ = 24605;</code>
         */
        public static final int CID_GROUP_CHANGE_MEMBER_REQ_VALUE = 24605;
        /**
         * <code>CID_GROUP_CHANGE_MEMBER_RSP = 24606;</code>
         */
        public static final int CID_GROUP_CHANGE_MEMBER_RSP_VALUE = 24606;
        /**
         * <code>CID_GROUP_OPT_NOTIFY = 24609;</code>
         * <p>
         * <pre>
         * notify
         * </pre>
         */
        public static final int CID_GROUP_OPT_NOTIFY_VALUE = 24609;
        /**
         * <code>CID_GROUP_CHANGE_MEMBER_NOTIFY = 24611;</code>
         */
        public static final int CID_GROUP_CHANGE_MEMBER_NOTIFY_VALUE = 24611;
        /**
         * <code>CID_GROUP_INFO_MODIFY__NOTIFY = 24612;</code>
         */
        public static final int CID_GROUP_INFO_MODIFY__NOTIFY_VALUE = 24612;
        /**
         * <code>CID_GROUP_CHANGE_MEMBER_TRANSFER_REQ = 24624;</code>
         */
        public static final int CID_GROUP_CHANGE_MEMBER_TRANSFER_REQ_VALUE = 24624;
        /**
         * <code>CID_GROUP_CHANGE_MEMBER_TRANSFER_RSP = 24625;</code>
         */
        public static final int CID_GROUP_CHANGE_MEMBER_TRANSFER_RSP_VALUE = 24625;
        /**
         * <code>CID_GROUP_SET_REQ = 24626;</code>
         */
        public static final int CID_GROUP_SET_REQ_VALUE = 24626;
        /**
         * <code>CID_GROUP_SET_RSP = 24627;</code>
         */
        public static final int CID_GROUP_SET_RSP_VALUE = 24627;
        /**
         * <code>S2S_GROUP_CHANGE_RSP = 24628;</code>
         */
        public static final int S2S_GROUP_CHANGE_RSP_VALUE = 24628;
        /**
         * <code>CID_ORG_LIST_REQ = 24849;</code>
         * <p>
         * <pre>
         * 组织架构
         * </pre>
         */
        public static final int CID_ORG_LIST_REQ_VALUE = 24849;
        /**
         * <code>CID_ORG_LIST_RSP = 24850;</code>
         */
        public static final int CID_ORG_LIST_RSP_VALUE = 24850;
        /**
         * <code>CID_GMSG_OFFLINE_MSG_NOTIFY = 25122;</code>
         */
        public static final int CID_GMSG_OFFLINE_MSG_NOTIFY_VALUE = 25122;
        /**
         * <code>CID_MSG_DATA_LIST_REQ = 25123;</code>
         * <p>
         * <pre>
         * 历史消息
         * </pre>
         */
        public static final int CID_MSG_DATA_LIST_REQ_VALUE = 25123;
        /**
         * <code>CID_MSG_DATA_LIST_RSP = 25124;</code>
         */
        public static final int CID_MSG_DATA_LIST_RSP_VALUE = 25124;
        /**
         * <code>CID_GROUP_CHAT_MSG_CANCEL = 25125;</code>
         */
        public static final int CID_GROUP_CHAT_MSG_CANCEL_VALUE = 25125;
        /**
         * <code>CID_GMSG_OFFLINE_MSG_ACK = 25126;</code>
         */
        public static final int CID_GMSG_OFFLINE_MSG_ACK_VALUE = 25126;
        /**
         * <code>CID_S2S_CHAT_MSG = 25361;</code>
         * <p>
         * <pre>
         * server to server 仅用于服务器间
         * </pre>
         */
        public static final int CID_S2S_CHAT_MSG_VALUE = 25361;
        /**
         * <code>CID_S2S_GROUP_MEMBER_REQ = 25362;</code>
         */
        public static final int CID_S2S_GROUP_MEMBER_REQ_VALUE = 25362;
        /**
         * <code>CID_S2S_GROUP_MEMBER_RSP = 25363;</code>
         */
        public static final int CID_S2S_GROUP_MEMBER_RSP_VALUE = 25363;
        /**
         * <code>CID_S2S_BUDDY_LIST_REQ = 25364;</code>
         */
        public static final int CID_S2S_BUDDY_LIST_REQ_VALUE = 25364;
        /**
         * <code>CID_S2S_BUDDY_LIST_RSP = 25365;</code>
         */
        public static final int CID_S2S_BUDDY_LIST_RSP_VALUE = 25365;
        /**
         * <code>CID_USER_INFO_REQ = 28689;</code>
         * <p>
         * <pre>
         * 用户资料
         * </pre>
         */
        public static final int CID_USER_INFO_REQ_VALUE = 28689;
        /**
         * <code>CID_USER_INFO_RSP = 28690;</code>
         */
        public static final int CID_USER_INFO_RSP_VALUE = 28690;
        /**
         * <code>CID_USER_INFO_OPT_REQ = 28691;</code>
         */
        public static final int CID_USER_INFO_OPT_REQ_VALUE = 28691;
        /**
         * <code>CID_USER_INFO_OPT_RSP = 28692;</code>
         */
        public static final int CID_USER_INFO_OPT_RSP_VALUE = 28692;
        /**
         * <code>CID_BUDDY_LIST_SINGLE_USER_INFO_REQ = 29191;</code>
         * <p>
         * <pre>
         * 好友命令
         * </pre>
         */
        public static final int CID_BUDDY_LIST_SINGLE_USER_INFO_REQ_VALUE = 29191;
        /**
         * <code>CID_BUDDY_LIST_USER_INFO_RSP = 29192;</code>
         */
        public static final int CID_BUDDY_LIST_USER_INFO_RSP_VALUE = 29192;
        /**
         * <code>CID_BUDDY_LIST_CHANGE_AVATAR_REQ = 29199;</code>
         * <p>
         * <pre>
         * 头像修改
         * </pre>
         */
        public static final int CID_BUDDY_LIST_CHANGE_AVATAR_REQ_VALUE = 29199;
        /**
         * <code>CID_BUDDY_LIST_CHANGE_AVATAR_RSP = 29200;</code>
         */
        public static final int CID_BUDDY_LIST_CHANGE_AVATAR_RSP_VALUE = 29200;
        /**
         * <code>CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQ = 29202;</code>
         * <p>
         * <pre>
         * 修改个性签名
         * </pre>
         */
        public static final int CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQ_VALUE = 29202;
        /**
         * <code>CID_BUDDY_LIST_CHANGE_SIGN_INFO_RSP = 29203;</code>
         */
        public static final int CID_BUDDY_LIST_CHANGE_SIGN_INFO_RSP_VALUE = 29203;
        /**
         * <code>CID_BUDDY_LIST_MODIFY_USER_INFO_REQ = 29204;</code>
         * <p>
         * <pre>
         * 修改个人信息
         * </pre>
         */
        public static final int CID_BUDDY_LIST_MODIFY_USER_INFO_REQ_VALUE = 29204;
        /**
         * <code>CID_BUDDY_LIST_MODIFY_USER_INFO_RSP = 29205;</code>
         */
        public static final int CID_BUDDY_LIST_MODIFY_USER_INFO_RSP_VALUE = 29205;
        /**
         * <code>CID_BUDDY_LIST_OPT_REQ = 29206;</code>
         * <p>
         * <pre>
         * 好友操作（add or delete）
         * </pre>
         */
        public static final int CID_BUDDY_LIST_OPT_REQ_VALUE = 29206;
        /**
         * <code>CID_BUDDY_LIST_OPT_RSP = 29207;</code>
         */
        public static final int CID_BUDDY_LIST_OPT_RSP_VALUE = 29207;
        /**
         * <code>CID_BUDDY_LIST_MODIFY_NICKNAME_REQ = 29208;</code>
         * <p>
         * <pre>
         * 修改好友备注
         * </pre>
         */
        public static final int CID_BUDDY_LIST_MODIFY_NICKNAME_REQ_VALUE = 29208;
        /**
         * <code>CID_BUDDY_LIST_MODIFY_NICKNAME_RSP = 29209;</code>
         */
        public static final int CID_BUDDY_LIST_MODIFY_NICKNAME_RSP_VALUE = 29209;
        /**
         * <code>CID_BUDDY_LIST_REQ = 29210;</code>
         * <p>
         * <pre>
         * 获取好友请求列表
         * </pre>
         */
        public static final int CID_BUDDY_LIST_REQ_VALUE = 29210;
        /**
         * <code>CID_BUDDY_LIST_RSP = 29211;</code>
         */
        public static final int CID_BUDDY_LIST_RSP_VALUE = 29211;
        /**
         * <code>CID_BUDDY_LIST_OPT_RESULT = 29212;</code>
         */
        public static final int CID_BUDDY_LIST_OPT_RESULT_VALUE = 29212;
        /**
         * <code>CID_CONTACT_COLLECTION_REQ = 29217;</code>
         */
        public static final int CID_CONTACT_COLLECTION_REQ_VALUE = 29217;
        /**
         * <code>CID_CONTACT_COLLECTION_RSP = 29218;</code>
         */
        public static final int CID_CONTACT_COLLECTION_RSP_VALUE = 29218;
        /**
         * <code>CID_BUDDY_LIST_OPT_NOTIFY = 29219;</code>
         * <p>
         * <pre>
         * 好友操作通知
         * </pre>
         */
        public static final int CID_BUDDY_LIST_OPT_NOTIFY_VALUE = 29219;


        public final int getNumber() {
            return value;
        }

        public static COMMANDID valueOf(int value) {
            switch (value) {
                case 1:
                    return HEART_BEAT;
                case 2:
                    return HEART_BEAT_ACK;
                case 20:
                    return ROUTE_REQ;
                case 21:
                    return ROUTE_ONLINECHECK;
                case 22:
                    return ROUTE_ONLINECHECK_ACK;
                case 23:
                    return ROUTE_PHONE_CHECK;
                case 24:
                    return ROUTE_PHONE_CHECK_ACK;
                case 101:
                    return USER_LOGIN;
                case 102:
                    return USER_LOGIN_ACK;
                case 103:
                    return USER_LOGOFF;
                case 104:
                    return USER_LOGOFF_ACK;
                case 105:
                    return MULTI_DEVICE_KICKED_NOTIFY;
                case 106:
                    return IM_TEXT;
                case 107:
                    return IM_PICTURE;
                case 108:
                    return IM_AUDIO;
                case 109:
                    return IM_VIDEO;
                case 110:
                    return IM_URL;
                case 111:
                    return IM_LOCATION;
                case 112:
                    return IM_LOCATION_SHARE_BEGIN;
                case 113:
                    return IM_LOCATION_SHARE_ANSWER;
                case 114:
                    return IM_LOCATION_SHARE_CONTINUE;
                case 115:
                    return IM_LOCATION_SHARE_END;
                case 117:
                    return PHONEDIAL;
                case 118:
                    return PHONEDIAL_ACK;
                case 119:
                    return GET_CONTACTS_INFO;
                case 120:
                    return GET_CONTACTS_INFO_ACK;
                case 121:
                    return PHP_USER_MODIFYSTATUS;
                case 122:
                    return PHP_USER_MODIFYSTATUS_ACK;
                case 123:
                    return PHP_ADMIN_MODIFYUSERSTATUS;
                case 124:
                    return PHP_ADMIN_MODIFYUSERSTATUS_ACK;
                case 400:
                    return REQUEST_IP;
                case 401:
                    return REQUEST_IP_ACK;
                case 402:
                    return REGIST_COMMUNICATIONSERVICE;
                case 403:
                    return REPORT_ONLINERS;
                case 404:
                    return BROATCAT_NOTIFY;
                case 405:
                    return ROUTE_BRAODCAST;
                case 406:
                    return CID_USER_STAT_PUSH_REQ;
                case 407:
                    return CID_USER_STAT_SYNC_REQ;
                case 408:
                    return CID_USER_STAT_SYNC_RSP;
                case 409:
                    return REGIST_RSP;
                case 501:
                    return GENERAL_MESSAGE;
                case 502:
                    return POP_GENERAL_MESSAGE;
                case 503:
                    return POP_GENERAL_MESSAGE_ACK;
                case 600:
                    return BULLETIN;
                case 601:
                    return BULLETIN_NOTIFY;
                case 605:
                    return BULLETIN_PUBLISH;
                case 606:
                    return BULLETIN_PUBLISH_ACK;
                case 701:
                    return BIZCARD_GET_BYPHONE;
                case 702:
                    return BIZCARD_GET_BYPHONE_ACK;
                case 703:
                    return BIZCARD_INSERT;
                case 704:
                    return BIZCARD_INSERT_ACK;
                case 705:
                    return BIZCARD_UPDATE;
                case 706:
                    return BIZCARD_UPDATE_ACK;
                case 707:
                    return BIZCARD_DELETE;
                case 708:
                    return BIZCARD_DELETE_ACK;
                case 750:
                    return BUSINESS_QUERY_AD;
                case 751:
                    return BUSINESS_QUERY_AD_ACK;
                case 752:
                    return BUSINESS_SAVE_AD;
                case 753:
                    return BUSINESS_SAVE_AD_ACK;
                case 754:
                    return BUSINESS_UPDATE_AD;
                case 755:
                    return BUSINESS_UPDATE_AD_ACK;
                case 756:
                    return BUSINESS_DELETE_AD;
                case 757:
                    return BUSINESS_DELETE_AD_ACK;
                case 758:
                    return USERSHOWRULE_RESULT;
                case 759:
                    return USERSHOWRULE_GET;
                case 760:
                    return USERSHOWRULE_SAVE;
                case 761:
                    return USERSHOWRULE_UPDATE;
                case 762:
                    return USERSHOWRULE_DELETE;
                case 10000:
                    return BONDERY_MQ;
                case 10001:
                    return SYSTEM_LOG;
                case 10700:
                    return LOCATIONSHARE;
                case 10701:
                    return LOCATIONSHARE_NOTIFY;
                case 10702:
                    return LOCATIONSHARE_INVIT;
                case 10703:
                    return LOCATIONSHARE_INVIT_ACK;
                case 10704:
                    return LOCATIONSHARE_INVIT_NOTIFY;
                case 10705:
                    return LOCATIONSHARE_JOIN;
                case 10706:
                    return LOCATIONSHARE_JOIN_ACK;
                case 10707:
                    return LOCATIONSHARE_JOIN_NOTIFY;
                case 10709:
                    return LOCATIONSHARE_QUIT;
                case 10710:
                    return LOCATIONSHARE_QUIT_ACK;
                case 10711:
                    return LOCATIONSHARE_QUIT_NOTIFY;
                case 10801:
                    return PUSH_APNS;
                case 10802:
                    return PUSH_APNS_ACK;
                case 10805:
                    return PUSH_GENERAL;
                case 10806:
                    return PUSH_SMS;
                case 10901:
                    return ENDORSEMENT_TAKE;
                case 10902:
                    return ENDORSEMENT_TAKE_ACK;
                case 10911:
                    return ENDORSEMENT_QUERY;
                case 10912:
                    return ENDORSEMENT_QUERY_ACK;
                case 10921:
                    return ENDORSEMENT_DELET;
                case 10922:
                    return ENDORSEMENT_DELETE_ACK;
                case 10951:
                    return ENDORSEMENT_ADMIN_QUERY;
                case 10952:
                    return ENDORSEMENT_ADMIN_QUERY_ACK;
                case 11001:
                    return SHOWBIZ_QUERY;
                case 11002:
                    return SHOWBIZ_QUERY_ACK;
                case 11011:
                    return SHOWBIZ_INSERT;
                case 11012:
                    return SHOWBIZ_INSERT_ACK;
                case 11021:
                    return SHOWBIZ_DELETE;
                case 11022:
                    return SHOWBIZ_DELETE_ACK;
                case 11031:
                    return SHOWBIZ_UPDATE;
                case 11032:
                    return SHOWBIZ_UPDATE_ACK;
                case 11041:
                    return SHOWPERSONAL_QUERY;
                case 11042:
                    return SHOWPERSONAL_QUERY_ACK;
                case 11051:
                    return SHOWPERSONAL_INSERT;
                case 11052:
                    return SHOWPERSONAL_INSERT_ACK;
                case 11061:
                    return SHOWPERSONAL_UPDATE;
                case 11062:
                    return SHOWPERSONAL_UPDATE_ACK;
                case 11071:
                    return SHOWPERSONAL_DELETE;
                case 11072:
                    return SHOWPERSONAL_DELETE_ACK;
                case 11081:
                    return SHOWDIAL;
                case 11082:
                    return SHOWDIAL_ACK;
                case 11083:
                    return SHOWDIAL_NOTIFY;
                case 11091:
                    return SHOWDIAL_CACHE_UPDATE_SYSTEMNOTIFY;
                case 16401:
                    return CID_USER_CONNECT_EXCEPT;
                case 16657:
                    return CID_USER_STATE_BROADCAST;
                case 16658:
                    return CID_USER_STATE_REPORT;
                case 16913:
                    return CID_MONITOR_CLIENT_REGISTER_REQ;
                case 16914:
                    return CID_MONITOR_CLIENT_REGISTER_RSP;
                case 16915:
                    return CID_MASTER_BROADCAST_SERVER_INFO;
                case 16916:
                    return CID_S2S_AUTHENTICATION_REQ;
                case 16917:
                    return CID_S2S_AUTHENTICATION_RSP;
                case 16918:
                    return CID_S2S_PING;
                case 16919:
                    return CID_S2S_PONG;
                case 16929:
                    return CID_REGISTER_CMD_REQ;
                case 17185:
                    return CID_CLUSTER_STATUS_REQ;
                case 17186:
                    return CID_CLUSTER_STATUS_RSP;
                case 17190:
                    return CID_CONFIG_SET_REQ;
                case 17191:
                    return CID_CONFIG_SET_RSP;
                case 20497:
                    return CID_CHAT_BUDDY;
                case 20498:
                    return CID_CHAT_GROUP;
                case 20499:
                    return CID_OFFLINE_MSG_NOTIFY;
                case 20500:
                    return CID_CHAT_MSG_ACK;
                case 20501:
                    return CID_PUSH_MSG;
                case 20502:
                    return CID_PUSH_MSG_ACK;
                case 20759:
                    return CID_CHAT_CUSTOMER_SERVICES;
                case 20760:
                    return CID_CHAT_MACHINE;
                case 24593:
                    return CID_GROUP_LIST_REQ;
                case 24594:
                    return CID_GROUP_LIST_RSP;
                case 24595:
                    return CID_GROUP_INFO_REQ;
                case 24596:
                    return CID_GROUP_INFO_RSP;
                case 24597:
                    return CID_GROUP_MEMBER_REQ;
                case 24598:
                    return CID_GROUP_MEMBER_RSP;
                case 24599:
                    return CID_GROUP_CREATE_REQ;
                case 24600:
                    return CID_GROUP_CREATE_RSP;
                case 24601:
                    return CID_GROUP_DISSOLVE_REQ;
                case 24602:
                    return CID_GROUP_DISSOLVE_RSP;
                case 24603:
                    return CID_GROUP_INFO_MODIFY_REQ;
                case 24604:
                    return CID_GROUP_INFO_MODIFY_RSP;
                case 24605:
                    return CID_GROUP_CHANGE_MEMBER_REQ;
                case 24606:
                    return CID_GROUP_CHANGE_MEMBER_RSP;
                case 24609:
                    return CID_GROUP_OPT_NOTIFY;
                case 24611:
                    return CID_GROUP_CHANGE_MEMBER_NOTIFY;
                case 24612:
                    return CID_GROUP_INFO_MODIFY__NOTIFY;
                case 24624:
                    return CID_GROUP_CHANGE_MEMBER_TRANSFER_REQ;
                case 24625:
                    return CID_GROUP_CHANGE_MEMBER_TRANSFER_RSP;
                case 24626:
                    return CID_GROUP_SET_REQ;
                case 24627:
                    return CID_GROUP_SET_RSP;
                case 24628:
                    return S2S_GROUP_CHANGE_RSP;
                case 24849:
                    return CID_ORG_LIST_REQ;
                case 24850:
                    return CID_ORG_LIST_RSP;
                case 25122:
                    return CID_GMSG_OFFLINE_MSG_NOTIFY;
                case 25123:
                    return CID_MSG_DATA_LIST_REQ;
                case 25124:
                    return CID_MSG_DATA_LIST_RSP;
                case 25125:
                    return CID_GROUP_CHAT_MSG_CANCEL;
                case 25126:
                    return CID_GMSG_OFFLINE_MSG_ACK;
                case 25361:
                    return CID_S2S_CHAT_MSG;
                case 25362:
                    return CID_S2S_GROUP_MEMBER_REQ;
                case 25363:
                    return CID_S2S_GROUP_MEMBER_RSP;
                case 25364:
                    return CID_S2S_BUDDY_LIST_REQ;
                case 25365:
                    return CID_S2S_BUDDY_LIST_RSP;
                case 28689:
                    return CID_USER_INFO_REQ;
                case 28690:
                    return CID_USER_INFO_RSP;
                case 28691:
                    return CID_USER_INFO_OPT_REQ;
                case 28692:
                    return CID_USER_INFO_OPT_RSP;
                case 29191:
                    return CID_BUDDY_LIST_SINGLE_USER_INFO_REQ;
                case 29192:
                    return CID_BUDDY_LIST_USER_INFO_RSP;
                case 29199:
                    return CID_BUDDY_LIST_CHANGE_AVATAR_REQ;
                case 29200:
                    return CID_BUDDY_LIST_CHANGE_AVATAR_RSP;
                case 29202:
                    return CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQ;
                case 29203:
                    return CID_BUDDY_LIST_CHANGE_SIGN_INFO_RSP;
                case 29204:
                    return CID_BUDDY_LIST_MODIFY_USER_INFO_REQ;
                case 29205:
                    return CID_BUDDY_LIST_MODIFY_USER_INFO_RSP;
                case 29206:
                    return CID_BUDDY_LIST_OPT_REQ;
                case 29207:
                    return CID_BUDDY_LIST_OPT_RSP;
                case 29208:
                    return CID_BUDDY_LIST_MODIFY_NICKNAME_REQ;
                case 29209:
                    return CID_BUDDY_LIST_MODIFY_NICKNAME_RSP;
                case 29210:
                    return CID_BUDDY_LIST_REQ;
                case 29211:
                    return CID_BUDDY_LIST_RSP;
                case 29212:
                    return CID_BUDDY_LIST_OPT_RESULT;
                case 29217:
                    return CID_CONTACT_COLLECTION_REQ;
                case 29218:
                    return CID_CONTACT_COLLECTION_RSP;
                case 29219:
                    return CID_BUDDY_LIST_OPT_NOTIFY;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<COMMANDID>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<COMMANDID>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<COMMANDID>() {
                    public COMMANDID findValueByNumber(int number) {
                        return COMMANDID.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(2);
        }

        private static final COMMANDID[] VALUES = values();

        public static COMMANDID valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private COMMANDID(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:COMMANDID)
    }

    /**
     * Protobuf enum {@code USER_TYPE}
     */
    public enum USER_TYPE
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>USER_TYPE_UNKNOWN = 0;</code>
         */
        USER_TYPE_UNKNOWN(0, 0),
        /**
         * <code>USER_TYPE_PERSONAL = 1;</code>
         */
        USER_TYPE_PERSONAL(1, 1),
        /**
         * <code>USER_TYPE_PUBLIC_ACCOUNT = 2;</code>
         */
        USER_TYPE_PUBLIC_ACCOUNT(2, 2),;

        /**
         * <code>USER_TYPE_UNKNOWN = 0;</code>
         */
        public static final int USER_TYPE_UNKNOWN_VALUE = 0;
        /**
         * <code>USER_TYPE_PERSONAL = 1;</code>
         */
        public static final int USER_TYPE_PERSONAL_VALUE = 1;
        /**
         * <code>USER_TYPE_PUBLIC_ACCOUNT = 2;</code>
         */
        public static final int USER_TYPE_PUBLIC_ACCOUNT_VALUE = 2;


        public final int getNumber() {
            return value;
        }

        public static USER_TYPE valueOf(int value) {
            switch (value) {
                case 0:
                    return USER_TYPE_UNKNOWN;
                case 1:
                    return USER_TYPE_PERSONAL;
                case 2:
                    return USER_TYPE_PUBLIC_ACCOUNT;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<USER_TYPE>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<USER_TYPE>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<USER_TYPE>() {
                    public USER_TYPE findValueByNumber(int number) {
                        return USER_TYPE.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(3);
        }

        private static final USER_TYPE[] VALUES = values();

        public static USER_TYPE valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private USER_TYPE(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:USER_TYPE)
    }

    /**
     * Protobuf enum {@code ERRNO_CODE}
     */
    public enum ERRNO_CODE
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>ERRNO_CODE_OK = 0;</code>
         */
        ERRNO_CODE_OK(0, 0),
        /**
         * <code>ERRNO_CODE_DEFAULT = 2;</code>
         * <p>
         * <pre>
         * 2-10 resrved
         * </pre>
         */
        ERRNO_CODE_DEFAULT(1, 2),
        /**
         * <code>ERRNO_CODE_LOGIN_IN_OTHER_DEVICE = 100;</code>
         * <p>
         * <pre>
         * 异地登陆
         * </pre>
         */
        ERRNO_CODE_LOGIN_IN_OTHER_DEVICE(2, 100),
        /**
         * <code>ERRNO_CODE_NO_PROTOCOL = 101;</code>
         * <p>
         * <pre>
         * 没有这个协议
         * </pre>
         */
        ERRNO_CODE_NO_PROTOCOL(3, 101),
        /**
         * <code>ERRNO_CODE_TAG_NO_PROTOCOL = 102;</code>
         * <p>
         * <pre>
         * tag不是这个协议的
         * </pre>
         */
        ERRNO_CODE_TAG_NO_PROTOCOL(4, 102),
        /**
         * <code>ERRNO_CODE_PUSH_QUEUE = 103;</code>
         * <p>
         * <pre>
         * 数据入队列失败
         * </pre>
         */
        ERRNO_CODE_PUSH_QUEUE(5, 103),
        /**
         * <code>ERRNO_CODE_LOGON_NO_PHONE_S = 104;</code>
         * <p>
         * <pre>
         * LOGON无TAG_PHONE_S
         * </pre>
         */
        ERRNO_CODE_LOGON_NO_PHONE_S(6, 104),
        /**
         * <code>ERRNO_CODE_HEART_ERR_SESSION_S = 105;</code>
         * <p>
         * <pre>
         * HEART上传TAG_SESSION_S无效
         * </pre>
         */
        ERRNO_CODE_HEART_ERR_SESSION_S(7, 105),
        /**
         * <code>ERRNO_CODE_NOT_LOGON = 106;</code>
         * <p>
         * <pre>
         * 未登录
         * </pre>
         */
        ERRNO_CODE_NOT_LOGON(8, 106),
        /**
         * <code>ERRNO_CODE_WITHOUT_TAG = 107;</code>
         * <p>
         * <pre>
         * 缺少必备项
         * </pre>
         */
        ERRNO_CODE_WITHOUT_TAG(9, 107),
        /**
         * <code>ERRNO_CODE_WITHOUT_UID = 108;</code>
         * <p>
         * <pre>
         * 缺少uid
         * </pre>
         */
        ERRNO_CODE_WITHOUT_UID(10, 108),
        /**
         * <code>ERRNO_CODE_WITHOUT_TERMID = 109;</code>
         * <p>
         * <pre>
         * 缺少termid
         * </pre>
         */
        ERRNO_CODE_WITHOUT_TERMID(11, 109),
        /**
         * <code>ERRNO_CODE_ERR_SESSIONID = 110;</code>
         * <p>
         * <pre>
         * 上传请求的TAG_SESSION_ID无效
         * </pre>
         */
        ERRNO_CODE_ERR_SESSIONID(12, 110),
        /**
         * <code>ERRNO_CODE_TERM_UNALIVE = 111;</code>
         * <p>
         * <pre>
         * 终端去活
         * </pre>
         */
        ERRNO_CODE_TERM_UNALIVE(13, 111),
        /**
         * <code>ERRNO_CODE_ERR_UID = 112;</code>
         * <p>
         * <pre>
         * uid错误
         * </pre>
         */
        ERRNO_CODE_ERR_UID(14, 112),
        /**
         * <code>ERRNO_CODE_ERR_PID = 113;</code>
         * <p>
         * <pre>
         * Pid错误
         * </pre>
         */
        ERRNO_CODE_ERR_PID(15, 113),
        /**
         * <code>ERRNO_CODE_ERR_RESEND = 114;</code>
         * <p>
         * <pre>
         * 重复消息
         * </pre>
         */
        ERRNO_CODE_ERR_RESEND(16, 114),
        /**
         * <code>ERRNO_CODE_ERR_TID = 115;</code>
         * <p>
         * <pre>
         * Tid错误
         * </pre>
         */
        ERRNO_CODE_ERR_TID(17, 115),
        /**
         * <code>ERRNO_CODE_SQL = 200;</code>
         * <p>
         * <pre>
         * Storage failure
         * </pre>
         */
        ERRNO_CODE_SQL(18, 200),
        /**
         * <code>ERRNO_CODE_DATA_SRAL = 201;</code>
         * <p>
         * <pre>
         * 数据序列化失败
         * </pre>
         */
        ERRNO_CODE_DATA_SRAL(19, 201),
        /**
         * <code>ERRNO_CODE_NOT_FIND_TARGET_USERID = 203;</code>
         * <p>
         * <pre>
         * 没找到对方的用户id
         * </pre>
         */
        ERRNO_CODE_NOT_FIND_TARGET_USERID(20, 203),
        /**
         * <code>ERRNO_CODE_DATA_WAREHOUSING_FAILURE_MYSQL = 204;</code>
         * <p>
         * <pre>
         * MYSQL数据入库失败
         * </pre>
         */
        ERRNO_CODE_DATA_WAREHOUSING_FAILURE_MYSQL(21, 204),
        /**
         * <code>ERRNO_CODE_DATA_WAREHOUSING_FAILURE_REDIS = 205;</code>
         * <p>
         * <pre>
         * redis数据入库失败
         * </pre>
         */
        ERRNO_CODE_DATA_WAREHOUSING_FAILURE_REDIS(22, 205),
        /**
         * <code>ERRNO_CODE_DB_SERVER_EXCEPTION = 206;</code>
         * <p>
         * <pre>
         * 数据库服务器异常
         * </pre>
         */
        ERRNO_CODE_DB_SERVER_EXCEPTION(23, 206),
        /**
         * <code>ERRNO_CODE_USER_SESSION_ERROR = 207;</code>
         * <p>
         * <pre>
         * 登陆的sissionid不正确
         * </pre>
         */
        ERRNO_CODE_USER_SESSION_ERROR(24, 207),
        /**
         * <code>ERRNO_CODE_USER_NOT_LOGIN = 208;</code>
         * <p>
         * <pre>
         * 用户未登陆
         * </pre>
         */
        ERRNO_CODE_USER_NOT_LOGIN(25, 208),
        /**
         * <code>ERRNO_CODE_USER_ID_ERROR = 209;</code>
         * <p>
         * <pre>
         * 登陆的user_id不正确
         * </pre>
         */
        ERRNO_CODE_USER_ID_ERROR(26, 209),
        /**
         * <code>ERRNO_CODE_USER_SEND_TOROUTE_ERROR = 210;</code>
         * <p>
         * <pre>
         * 转发至路由失败
         * </pre>
         */
        ERRNO_CODE_USER_SEND_TOROUTE_ERROR(27, 210),
        /**
         * <code>ERRNO_CODE_NOT_DST_PHONE = 211;</code>
         * <p>
         * <pre>
         * 缺少对方的电话号码
         * </pre>
         */
        ERRNO_CODE_NOT_DST_PHONE(28, 211),
        /**
         * <code>ERRNO_CODE_DATABASE_QUERY_FAILDED = 212;</code>
         * <p>
         * <pre>
         * 数据库查询失败
         * </pre>
         */
        ERRNO_CODE_DATABASE_QUERY_FAILDED(29, 212),
        /**
         * <code>ERRNO_CODE_DATA_EXCEPTION = 213;</code>
         * <p>
         * <pre>
         * 数据异常
         * </pre>
         */
        ERRNO_CODE_DATA_EXCEPTION(30, 213),
        /**
         * <code>ERRNO_CODE_NOT_SESSIONID = 214;</code>
         * <p>
         * <pre>
         * 没有携带session id
         * </pre>
         */
        ERRNO_CODE_NOT_SESSIONID(31, 214),
        /**
         * <code>ERRNO_CODE_NOT_PHONE = 215;</code>
         * <p>
         * <pre>
         * 没有携带手机号码
         * </pre>
         */
        ERRNO_CODE_NOT_PHONE(32, 215),
        /**
         * <code>ERRNO_CODE_PHONE_ERROR = 216;</code>
         * <p>
         * <pre>
         * 手机号码错误
         * </pre>
         */
        ERRNO_CODE_PHONE_ERROR(33, 216),
        /**
         * <code>ERRNO_CODE_DATABASE_NOT_DATA = 217;</code>
         * <p>
         * <pre>
         * 数据库没有数据
         * </pre>
         */
        ERRNO_CODE_DATABASE_NOT_DATA(34, 217),
        /**
         * <code>ERRNO_CODE_SHOW_EXPIRED = 218;</code>
         * <p>
         * <pre>
         * 对方的秀已经过期
         * </pre>
         */
        ERRNO_CODE_SHOW_EXPIRED(35, 218),
        /**
         * <code>ERRNO_CODE_NOT_TOKEN_ID = 219;</code>
         * <p>
         * <pre>
         * 没有携带token id
         * </pre>
         */
        ERRNO_CODE_NOT_TOKEN_ID(36, 219),
        /**
         * <code>ERRNO_CODE_NOT_SHOW = 220;</code>
         * <p>
         * <pre>
         * 没有找到对方的秀信息
         * </pre>
         */
        ERRNO_CODE_NOT_SHOW(37, 220),
        /**
         * <code>ERRNO_CODE_NOT_HUXIN_USER = 403;</code>
         * <p>
         * <pre>
         * 非呼信用户
         * </pre>
         */
        ERRNO_CODE_NOT_HUXIN_USER(38, 403),
        /**
         * <code>ERRNO_CODE_NOT_DEVICE_ID = 404;</code>
         * <p>
         * <pre>
         * 没有设备id
         * </pre>
         */
        ERRNO_CODE_NOT_DEVICE_ID(39, 404),
        /**
         * <code>ERRNO_CODE_BLOCKED_BY_DST_USER = 501;</code>
         * <p>
         * <pre>
         * </pre>
         */
        ERRNO_CODE_BLOCKED_BY_DST_USER(40, 501),
        /**
         * <code>ERRNO_CODE_INVALID_USER_INFO = 1101;</code>
         */
        ERRNO_CODE_INVALID_USER_INFO(41, 1101),
        /**
         * <code>ERRNO_CODE_INVALID_SESSION = 1102;</code>
         */
        ERRNO_CODE_INVALID_SESSION(42, 1102),
        /**
         * <code>ERRNO_CODE_INVALID_PASSWD = 1103;</code>
         */
        ERRNO_CODE_INVALID_PASSWD(43, 1103),
        /**
         * <code>ERRNO_CODE_INVALID_IM_CHAT_TARGET_USER = 1201;</code>
         */
        ERRNO_CODE_INVALID_IM_CHAT_TARGET_USER(44, 1201),
        /**
         * <code>ERRNO_CODE_INVALID_IM_CHAT_EMPTY_BODY_NOT_ALLOWED = 1202;</code>
         */
        ERRNO_CODE_INVALID_IM_CHAT_EMPTY_BODY_NOT_ALLOWED(45, 1202),
        /**
         * <code>ERRNO_CODE_LOCATIONSHARE_TASK_NOT_EXIST = 1301;</code>
         */
        ERRNO_CODE_LOCATIONSHARE_TASK_NOT_EXIST(46, 1301),
        /**
         * <code>ERRNO_CODE_LOCATIONSHARE_NOT_INSIDE_TASK = 1302;</code>
         */
        ERRNO_CODE_LOCATIONSHARE_NOT_INSIDE_TASK(47, 1302),
        /**
         * <code>ERRNO_CODE_USER_NOT_IN_GROUP = 1303;</code>
         */
        ERRNO_CODE_USER_NOT_IN_GROUP(48, 1303),
        /**
         * <code>ERRNO_CODE_USER_IS_DELETE = 1304;</code>
         * <p>
         * <pre>
         * buddy chat msg
         * </pre>
         */
        ERRNO_CODE_USER_IS_DELETE(49, 1304),
        /**
         * <code>ERRNO_CODE_USER_IS_BLACK = 1305;</code>
         * <p>
         * <pre>
         * 被拉黑
         * </pre>
         */
        ERRNO_CODE_USER_IS_BLACK(50, 1305),
        /**
         * <code>ERRNO_CODE_USER_NOT_BUDDY = 1306;</code>
         * <p>
         * <pre>
         * 非好友
         * </pre>
         */
        ERRNO_CODE_USER_NOT_BUDDY(51, 1306),;

        /**
         * <code>ERRNO_CODE_OK = 0;</code>
         */
        public static final int ERRNO_CODE_OK_VALUE = 0;
        /**
         * <code>ERRNO_CODE_DEFAULT = 2;</code>
         * <p>
         * <pre>
         * 2-10 resrved
         * </pre>
         */
        public static final int ERRNO_CODE_DEFAULT_VALUE = 2;
        /**
         * <code>ERRNO_CODE_LOGIN_IN_OTHER_DEVICE = 100;</code>
         * <p>
         * <pre>
         * 异地登陆
         * </pre>
         */
        public static final int ERRNO_CODE_LOGIN_IN_OTHER_DEVICE_VALUE = 100;
        /**
         * <code>ERRNO_CODE_NO_PROTOCOL = 101;</code>
         * <p>
         * <pre>
         * 没有这个协议
         * </pre>
         */
        public static final int ERRNO_CODE_NO_PROTOCOL_VALUE = 101;
        /**
         * <code>ERRNO_CODE_TAG_NO_PROTOCOL = 102;</code>
         * <p>
         * <pre>
         * tag不是这个协议的
         * </pre>
         */
        public static final int ERRNO_CODE_TAG_NO_PROTOCOL_VALUE = 102;
        /**
         * <code>ERRNO_CODE_PUSH_QUEUE = 103;</code>
         * <p>
         * <pre>
         * 数据入队列失败
         * </pre>
         */
        public static final int ERRNO_CODE_PUSH_QUEUE_VALUE = 103;
        /**
         * <code>ERRNO_CODE_LOGON_NO_PHONE_S = 104;</code>
         * <p>
         * <pre>
         * LOGON无TAG_PHONE_S
         * </pre>
         */
        public static final int ERRNO_CODE_LOGON_NO_PHONE_S_VALUE = 104;
        /**
         * <code>ERRNO_CODE_HEART_ERR_SESSION_S = 105;</code>
         * <p>
         * <pre>
         * HEART上传TAG_SESSION_S无效
         * </pre>
         */
        public static final int ERRNO_CODE_HEART_ERR_SESSION_S_VALUE = 105;
        /**
         * <code>ERRNO_CODE_NOT_LOGON = 106;</code>
         * <p>
         * <pre>
         * 未登录
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_LOGON_VALUE = 106;
        /**
         * <code>ERRNO_CODE_WITHOUT_TAG = 107;</code>
         * <p>
         * <pre>
         * 缺少必备项
         * </pre>
         */
        public static final int ERRNO_CODE_WITHOUT_TAG_VALUE = 107;
        /**
         * <code>ERRNO_CODE_WITHOUT_UID = 108;</code>
         * <p>
         * <pre>
         * 缺少uid
         * </pre>
         */
        public static final int ERRNO_CODE_WITHOUT_UID_VALUE = 108;
        /**
         * <code>ERRNO_CODE_WITHOUT_TERMID = 109;</code>
         * <p>
         * <pre>
         * 缺少termid
         * </pre>
         */
        public static final int ERRNO_CODE_WITHOUT_TERMID_VALUE = 109;
        /**
         * <code>ERRNO_CODE_ERR_SESSIONID = 110;</code>
         * <p>
         * <pre>
         * 上传请求的TAG_SESSION_ID无效
         * </pre>
         */
        public static final int ERRNO_CODE_ERR_SESSIONID_VALUE = 110;
        /**
         * <code>ERRNO_CODE_TERM_UNALIVE = 111;</code>
         * <p>
         * <pre>
         * 终端去活
         * </pre>
         */
        public static final int ERRNO_CODE_TERM_UNALIVE_VALUE = 111;
        /**
         * <code>ERRNO_CODE_ERR_UID = 112;</code>
         * <p>
         * <pre>
         * uid错误
         * </pre>
         */
        public static final int ERRNO_CODE_ERR_UID_VALUE = 112;
        /**
         * <code>ERRNO_CODE_ERR_PID = 113;</code>
         * <p>
         * <pre>
         * Pid错误
         * </pre>
         */
        public static final int ERRNO_CODE_ERR_PID_VALUE = 113;
        /**
         * <code>ERRNO_CODE_ERR_RESEND = 114;</code>
         * <p>
         * <pre>
         * 重复消息
         * </pre>
         */
        public static final int ERRNO_CODE_ERR_RESEND_VALUE = 114;
        /**
         * <code>ERRNO_CODE_ERR_TID = 115;</code>
         * <p>
         * <pre>
         * Tid错误
         * </pre>
         */
        public static final int ERRNO_CODE_ERR_TID_VALUE = 115;
        /**
         * <code>ERRNO_CODE_SQL = 200;</code>
         * <p>
         * <pre>
         * Storage failure
         * </pre>
         */
        public static final int ERRNO_CODE_SQL_VALUE = 200;
        /**
         * <code>ERRNO_CODE_DATA_SRAL = 201;</code>
         * <p>
         * <pre>
         * 数据序列化失败
         * </pre>
         */
        public static final int ERRNO_CODE_DATA_SRAL_VALUE = 201;
        /**
         * <code>ERRNO_CODE_NOT_FIND_TARGET_USERID = 203;</code>
         * <p>
         * <pre>
         * 没找到对方的用户id
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_FIND_TARGET_USERID_VALUE = 203;
        /**
         * <code>ERRNO_CODE_DATA_WAREHOUSING_FAILURE_MYSQL = 204;</code>
         * <p>
         * <pre>
         * MYSQL数据入库失败
         * </pre>
         */
        public static final int ERRNO_CODE_DATA_WAREHOUSING_FAILURE_MYSQL_VALUE = 204;
        /**
         * <code>ERRNO_CODE_DATA_WAREHOUSING_FAILURE_REDIS = 205;</code>
         * <p>
         * <pre>
         * redis数据入库失败
         * </pre>
         */
        public static final int ERRNO_CODE_DATA_WAREHOUSING_FAILURE_REDIS_VALUE = 205;
        /**
         * <code>ERRNO_CODE_DB_SERVER_EXCEPTION = 206;</code>
         * <p>
         * <pre>
         * 数据库服务器异常
         * </pre>
         */
        public static final int ERRNO_CODE_DB_SERVER_EXCEPTION_VALUE = 206;
        /**
         * <code>ERRNO_CODE_USER_SESSION_ERROR = 207;</code>
         * <p>
         * <pre>
         * 登陆的sissionid不正确
         * </pre>
         */
        public static final int ERRNO_CODE_USER_SESSION_ERROR_VALUE = 207;
        /**
         * <code>ERRNO_CODE_USER_NOT_LOGIN = 208;</code>
         * <p>
         * <pre>
         * 用户未登陆
         * </pre>
         */
        public static final int ERRNO_CODE_USER_NOT_LOGIN_VALUE = 208;
        /**
         * <code>ERRNO_CODE_USER_ID_ERROR = 209;</code>
         * <p>
         * <pre>
         * 登陆的user_id不正确
         * </pre>
         */
        public static final int ERRNO_CODE_USER_ID_ERROR_VALUE = 209;
        /**
         * <code>ERRNO_CODE_USER_SEND_TOROUTE_ERROR = 210;</code>
         * <p>
         * <pre>
         * 转发至路由失败
         * </pre>
         */
        public static final int ERRNO_CODE_USER_SEND_TOROUTE_ERROR_VALUE = 210;
        /**
         * <code>ERRNO_CODE_NOT_DST_PHONE = 211;</code>
         * <p>
         * <pre>
         * 缺少对方的电话号码
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_DST_PHONE_VALUE = 211;
        /**
         * <code>ERRNO_CODE_DATABASE_QUERY_FAILDED = 212;</code>
         * <p>
         * <pre>
         * 数据库查询失败
         * </pre>
         */
        public static final int ERRNO_CODE_DATABASE_QUERY_FAILDED_VALUE = 212;
        /**
         * <code>ERRNO_CODE_DATA_EXCEPTION = 213;</code>
         * <p>
         * <pre>
         * 数据异常
         * </pre>
         */
        public static final int ERRNO_CODE_DATA_EXCEPTION_VALUE = 213;
        /**
         * <code>ERRNO_CODE_NOT_SESSIONID = 214;</code>
         * <p>
         * <pre>
         * 没有携带session id
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_SESSIONID_VALUE = 214;
        /**
         * <code>ERRNO_CODE_NOT_PHONE = 215;</code>
         * <p>
         * <pre>
         * 没有携带手机号码
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_PHONE_VALUE = 215;
        /**
         * <code>ERRNO_CODE_PHONE_ERROR = 216;</code>
         * <p>
         * <pre>
         * 手机号码错误
         * </pre>
         */
        public static final int ERRNO_CODE_PHONE_ERROR_VALUE = 216;
        /**
         * <code>ERRNO_CODE_DATABASE_NOT_DATA = 217;</code>
         * <p>
         * <pre>
         * 数据库没有数据
         * </pre>
         */
        public static final int ERRNO_CODE_DATABASE_NOT_DATA_VALUE = 217;
        /**
         * <code>ERRNO_CODE_SHOW_EXPIRED = 218;</code>
         * <p>
         * <pre>
         * 对方的秀已经过期
         * </pre>
         */
        public static final int ERRNO_CODE_SHOW_EXPIRED_VALUE = 218;
        /**
         * <code>ERRNO_CODE_NOT_TOKEN_ID = 219;</code>
         * <p>
         * <pre>
         * 没有携带token id
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_TOKEN_ID_VALUE = 219;
        /**
         * <code>ERRNO_CODE_NOT_SHOW = 220;</code>
         * <p>
         * <pre>
         * 没有找到对方的秀信息
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_SHOW_VALUE = 220;
        /**
         * <code>ERRNO_CODE_NOT_HUXIN_USER = 403;</code>
         * <p>
         * <pre>
         * 非呼信用户
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_HUXIN_USER_VALUE = 403;
        /**
         * <code>ERRNO_CODE_NOT_DEVICE_ID = 404;</code>
         * <p>
         * <pre>
         * 没有设备id
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_DEVICE_ID_VALUE = 404;
        /**
         * <code>ERRNO_CODE_BLOCKED_BY_DST_USER = 501;</code>
         * <p>
         * <pre>
         * </pre>
         */
        public static final int ERRNO_CODE_BLOCKED_BY_DST_USER_VALUE = 501;
        /**
         * <code>ERRNO_CODE_INVALID_USER_INFO = 1101;</code>
         */
        public static final int ERRNO_CODE_INVALID_USER_INFO_VALUE = 1101;
        /**
         * <code>ERRNO_CODE_INVALID_SESSION = 1102;</code>
         */
        public static final int ERRNO_CODE_INVALID_SESSION_VALUE = 1102;
        /**
         * <code>ERRNO_CODE_INVALID_PASSWD = 1103;</code>
         */
        public static final int ERRNO_CODE_INVALID_PASSWD_VALUE = 1103;
        /**
         * <code>ERRNO_CODE_INVALID_IM_CHAT_TARGET_USER = 1201;</code>
         */
        public static final int ERRNO_CODE_INVALID_IM_CHAT_TARGET_USER_VALUE = 1201;
        /**
         * <code>ERRNO_CODE_INVALID_IM_CHAT_EMPTY_BODY_NOT_ALLOWED = 1202;</code>
         */
        public static final int ERRNO_CODE_INVALID_IM_CHAT_EMPTY_BODY_NOT_ALLOWED_VALUE = 1202;
        /**
         * <code>ERRNO_CODE_LOCATIONSHARE_TASK_NOT_EXIST = 1301;</code>
         */
        public static final int ERRNO_CODE_LOCATIONSHARE_TASK_NOT_EXIST_VALUE = 1301;
        /**
         * <code>ERRNO_CODE_LOCATIONSHARE_NOT_INSIDE_TASK = 1302;</code>
         */
        public static final int ERRNO_CODE_LOCATIONSHARE_NOT_INSIDE_TASK_VALUE = 1302;
        /**
         * <code>ERRNO_CODE_USER_NOT_IN_GROUP = 1303;</code>
         */
        public static final int ERRNO_CODE_USER_NOT_IN_GROUP_VALUE = 1303;
        /**
         * <code>ERRNO_CODE_USER_IS_DELETE = 1304;</code>
         * <p>
         * <pre>
         * buddy chat msg
         * </pre>
         */
        public static final int ERRNO_CODE_USER_IS_DELETE_VALUE = 1304;
        /**
         * <code>ERRNO_CODE_USER_IS_BLACK = 1305;</code>
         * <p>
         * <pre>
         * 被拉黑
         * </pre>
         */
        public static final int ERRNO_CODE_USER_IS_BLACK_VALUE = 1305;
        /**
         * <code>ERRNO_CODE_USER_NOT_BUDDY = 1306;</code>
         * <p>
         * <pre>
         * 非好友
         * </pre>
         */
        public static final int ERRNO_CODE_USER_NOT_BUDDY_VALUE = 1306;


        public final int getNumber() {
            return value;
        }

        public static ERRNO_CODE valueOf(int value) {
            switch (value) {
                case 0:
                    return ERRNO_CODE_OK;
                case 2:
                    return ERRNO_CODE_DEFAULT;
                case 100:
                    return ERRNO_CODE_LOGIN_IN_OTHER_DEVICE;
                case 101:
                    return ERRNO_CODE_NO_PROTOCOL;
                case 102:
                    return ERRNO_CODE_TAG_NO_PROTOCOL;
                case 103:
                    return ERRNO_CODE_PUSH_QUEUE;
                case 104:
                    return ERRNO_CODE_LOGON_NO_PHONE_S;
                case 105:
                    return ERRNO_CODE_HEART_ERR_SESSION_S;
                case 106:
                    return ERRNO_CODE_NOT_LOGON;
                case 107:
                    return ERRNO_CODE_WITHOUT_TAG;
                case 108:
                    return ERRNO_CODE_WITHOUT_UID;
                case 109:
                    return ERRNO_CODE_WITHOUT_TERMID;
                case 110:
                    return ERRNO_CODE_ERR_SESSIONID;
                case 111:
                    return ERRNO_CODE_TERM_UNALIVE;
                case 112:
                    return ERRNO_CODE_ERR_UID;
                case 113:
                    return ERRNO_CODE_ERR_PID;
                case 114:
                    return ERRNO_CODE_ERR_RESEND;
                case 115:
                    return ERRNO_CODE_ERR_TID;
                case 200:
                    return ERRNO_CODE_SQL;
                case 201:
                    return ERRNO_CODE_DATA_SRAL;
                case 203:
                    return ERRNO_CODE_NOT_FIND_TARGET_USERID;
                case 204:
                    return ERRNO_CODE_DATA_WAREHOUSING_FAILURE_MYSQL;
                case 205:
                    return ERRNO_CODE_DATA_WAREHOUSING_FAILURE_REDIS;
                case 206:
                    return ERRNO_CODE_DB_SERVER_EXCEPTION;
                case 207:
                    return ERRNO_CODE_USER_SESSION_ERROR;
                case 208:
                    return ERRNO_CODE_USER_NOT_LOGIN;
                case 209:
                    return ERRNO_CODE_USER_ID_ERROR;
                case 210:
                    return ERRNO_CODE_USER_SEND_TOROUTE_ERROR;
                case 211:
                    return ERRNO_CODE_NOT_DST_PHONE;
                case 212:
                    return ERRNO_CODE_DATABASE_QUERY_FAILDED;
                case 213:
                    return ERRNO_CODE_DATA_EXCEPTION;
                case 214:
                    return ERRNO_CODE_NOT_SESSIONID;
                case 215:
                    return ERRNO_CODE_NOT_PHONE;
                case 216:
                    return ERRNO_CODE_PHONE_ERROR;
                case 217:
                    return ERRNO_CODE_DATABASE_NOT_DATA;
                case 218:
                    return ERRNO_CODE_SHOW_EXPIRED;
                case 219:
                    return ERRNO_CODE_NOT_TOKEN_ID;
                case 220:
                    return ERRNO_CODE_NOT_SHOW;
                case 403:
                    return ERRNO_CODE_NOT_HUXIN_USER;
                case 404:
                    return ERRNO_CODE_NOT_DEVICE_ID;
                case 501:
                    return ERRNO_CODE_BLOCKED_BY_DST_USER;
                case 1101:
                    return ERRNO_CODE_INVALID_USER_INFO;
                case 1102:
                    return ERRNO_CODE_INVALID_SESSION;
                case 1103:
                    return ERRNO_CODE_INVALID_PASSWD;
                case 1201:
                    return ERRNO_CODE_INVALID_IM_CHAT_TARGET_USER;
                case 1202:
                    return ERRNO_CODE_INVALID_IM_CHAT_EMPTY_BODY_NOT_ALLOWED;
                case 1301:
                    return ERRNO_CODE_LOCATIONSHARE_TASK_NOT_EXIST;
                case 1302:
                    return ERRNO_CODE_LOCATIONSHARE_NOT_INSIDE_TASK;
                case 1303:
                    return ERRNO_CODE_USER_NOT_IN_GROUP;
                case 1304:
                    return ERRNO_CODE_USER_IS_DELETE;
                case 1305:
                    return ERRNO_CODE_USER_IS_BLACK;
                case 1306:
                    return ERRNO_CODE_USER_NOT_BUDDY;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ERRNO_CODE>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<ERRNO_CODE>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<ERRNO_CODE>() {
                    public ERRNO_CODE findValueByNumber(int number) {
                        return ERRNO_CODE.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(4);
        }

        private static final ERRNO_CODE[] VALUES = values();

        public static ERRNO_CODE valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private ERRNO_CODE(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:ERRNO_CODE)
    }

    /**
     * Protobuf enum {@code Device_Type}
     */
    public enum Device_Type
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>DeviceType_IPhone = 1;</code>
         */
        DeviceType_IPhone(0, 1),
        /**
         * <code>DeviceType_Android = 2;</code>
         */
        DeviceType_Android(1, 2),
        /**
         * <code>DeviceType_IPad = 3;</code>
         */
        DeviceType_IPad(2, 3),
        /**
         * <code>DeviceType_AndroidPad = 4;</code>
         */
        DeviceType_AndroidPad(3, 4),
        /**
         * <code>DeviceType_UNKNOWN = 5;</code>
         */
        DeviceType_UNKNOWN(4, 5),
        /**
         * <code>DeviceType_WEB = 6;</code>
         */
        DeviceType_WEB(5, 6),;

        /**
         * <code>DeviceType_IPhone = 1;</code>
         */
        public static final int DeviceType_IPhone_VALUE = 1;
        /**
         * <code>DeviceType_Android = 2;</code>
         */
        public static final int DeviceType_Android_VALUE = 2;
        /**
         * <code>DeviceType_IPad = 3;</code>
         */
        public static final int DeviceType_IPad_VALUE = 3;
        /**
         * <code>DeviceType_AndroidPad = 4;</code>
         */
        public static final int DeviceType_AndroidPad_VALUE = 4;
        /**
         * <code>DeviceType_UNKNOWN = 5;</code>
         */
        public static final int DeviceType_UNKNOWN_VALUE = 5;
        /**
         * <code>DeviceType_WEB = 6;</code>
         */
        public static final int DeviceType_WEB_VALUE = 6;


        public final int getNumber() {
            return value;
        }

        public static Device_Type valueOf(int value) {
            switch (value) {
                case 1:
                    return DeviceType_IPhone;
                case 2:
                    return DeviceType_Android;
                case 3:
                    return DeviceType_IPad;
                case 4:
                    return DeviceType_AndroidPad;
                case 5:
                    return DeviceType_UNKNOWN;
                case 6:
                    return DeviceType_WEB;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Device_Type>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<Device_Type>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<Device_Type>() {
                    public Device_Type findValueByNumber(int number) {
                        return Device_Type.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(5);
        }

        private static final Device_Type[] VALUES = values();

        public static Device_Type valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private Device_Type(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:Device_Type)
    }

    /**
     * Protobuf enum {@code USER_SHOW_STATUS}
     */
    public enum USER_SHOW_STATUS
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>USER_SHOW_STATUS_NORMAL = 0;</code>
         * <p>
         * <pre>
         * 0 正常 1停用 2冻结
         * </pre>
         */
        USER_SHOW_STATUS_NORMAL(0, 0),
        /**
         * <code>USER_SHOW_STATUS_DISABLE = 1;</code>
         */
        USER_SHOW_STATUS_DISABLE(1, 1),
        /**
         * <code>USER_SHOW_STATUS_FROZEN = 2;</code>
         */
        USER_SHOW_STATUS_FROZEN(2, 2),;

        /**
         * <code>USER_SHOW_STATUS_NORMAL = 0;</code>
         * <p>
         * <pre>
         * 0 正常 1停用 2冻结
         * </pre>
         */
        public static final int USER_SHOW_STATUS_NORMAL_VALUE = 0;
        /**
         * <code>USER_SHOW_STATUS_DISABLE = 1;</code>
         */
        public static final int USER_SHOW_STATUS_DISABLE_VALUE = 1;
        /**
         * <code>USER_SHOW_STATUS_FROZEN = 2;</code>
         */
        public static final int USER_SHOW_STATUS_FROZEN_VALUE = 2;


        public final int getNumber() {
            return value;
        }

        public static USER_SHOW_STATUS valueOf(int value) {
            switch (value) {
                case 0:
                    return USER_SHOW_STATUS_NORMAL;
                case 1:
                    return USER_SHOW_STATUS_DISABLE;
                case 2:
                    return USER_SHOW_STATUS_FROZEN;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<USER_SHOW_STATUS>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<USER_SHOW_STATUS>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<USER_SHOW_STATUS>() {
                    public USER_SHOW_STATUS findValueByNumber(int number) {
                        return USER_SHOW_STATUS.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(6);
        }

        private static final USER_SHOW_STATUS[] VALUES = values();

        public static USER_SHOW_STATUS valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private USER_SHOW_STATUS(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:USER_SHOW_STATUS)
    }

    /**
     * Protobuf enum {@code UserState}
     */
    public enum UserState
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>USER_STATE_ONLINE = 0;</code>
         */
        USER_STATE_ONLINE(0, 0),
        /**
         * <code>USER_STATE_OFFLINE = 1;</code>
         */
        USER_STATE_OFFLINE(1, 1),
        /**
         * <code>USER_STATE_LOGOUT = 3;</code>
         */
        USER_STATE_LOGOUT(2, 3),;

        /**
         * <code>USER_STATE_ONLINE = 0;</code>
         */
        public static final int USER_STATE_ONLINE_VALUE = 0;
        /**
         * <code>USER_STATE_OFFLINE = 1;</code>
         */
        public static final int USER_STATE_OFFLINE_VALUE = 1;
        /**
         * <code>USER_STATE_LOGOUT = 3;</code>
         */
        public static final int USER_STATE_LOGOUT_VALUE = 3;


        public final int getNumber() {
            return value;
        }

        public static UserState valueOf(int value) {
            switch (value) {
                case 0:
                    return USER_STATE_ONLINE;
                case 1:
                    return USER_STATE_OFFLINE;
                case 3:
                    return USER_STATE_LOGOUT;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<UserState>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<UserState>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<UserState>() {
                    public UserState findValueByNumber(int number) {
                        return UserState.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(7);
        }

        private static final UserState[] VALUES = values();

        public static UserState valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private UserState(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:UserState)
    }

    /**
     * Protobuf enum {@code ResultCode}
     */
    public enum ResultCode
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>RESULT_CODE_SUCCESS = 1;</code>
         */
        RESULT_CODE_SUCCESS(0, 1),
        /**
         * <code>RESULT_CODE_FAIL = 2;</code>
         */
        RESULT_CODE_FAIL(1, 2),
        /**
         * <code>RESULT_CODE_NOT_FIND = 3;</code>
         */
        RESULT_CODE_NOT_FIND(2, 3),
        /**
         * <code>RESULT_CODE_PARAMETER_ERROR = 4;</code>
         */
        RESULT_CODE_PARAMETER_ERROR(3, 4),;

        /**
         * <code>RESULT_CODE_SUCCESS = 1;</code>
         */
        public static final int RESULT_CODE_SUCCESS_VALUE = 1;
        /**
         * <code>RESULT_CODE_FAIL = 2;</code>
         */
        public static final int RESULT_CODE_FAIL_VALUE = 2;
        /**
         * <code>RESULT_CODE_NOT_FIND = 3;</code>
         */
        public static final int RESULT_CODE_NOT_FIND_VALUE = 3;
        /**
         * <code>RESULT_CODE_PARAMETER_ERROR = 4;</code>
         */
        public static final int RESULT_CODE_PARAMETER_ERROR_VALUE = 4;


        public final int getNumber() {
            return value;
        }

        public static ResultCode valueOf(int value) {
            switch (value) {
                case 1:
                    return RESULT_CODE_SUCCESS;
                case 2:
                    return RESULT_CODE_FAIL;
                case 3:
                    return RESULT_CODE_NOT_FIND;
                case 4:
                    return RESULT_CODE_PARAMETER_ERROR;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ResultCode>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<ResultCode>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<ResultCode>() {
                    public ResultCode findValueByNumber(int number) {
                        return ResultCode.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(8);
        }

        private static final ResultCode[] VALUES = values();

        public static ResultCode valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private ResultCode(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:ResultCode)
    }

    /**
     * Protobuf enum {@code IM_CHANNEL}
     */
    public enum IM_CHANNEL
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>IM_CHANNEL_DEFAULT = 0;</code>
         */
        IM_CHANNEL_DEFAULT(0, 0),
        /**
         * <code>IM_CHANNEL_SMS = 1;</code>
         */
        IM_CHANNEL_SMS(1, 1),
        /**
         * <code>IM_CHANNEL_QQ = 2;</code>
         */
        IM_CHANNEL_QQ(2, 2),;

        /**
         * <code>IM_CHANNEL_DEFAULT = 0;</code>
         */
        public static final int IM_CHANNEL_DEFAULT_VALUE = 0;
        /**
         * <code>IM_CHANNEL_SMS = 1;</code>
         */
        public static final int IM_CHANNEL_SMS_VALUE = 1;
        /**
         * <code>IM_CHANNEL_QQ = 2;</code>
         */
        public static final int IM_CHANNEL_QQ_VALUE = 2;


        public final int getNumber() {
            return value;
        }

        public static IM_CHANNEL valueOf(int value) {
            switch (value) {
                case 0:
                    return IM_CHANNEL_DEFAULT;
                case 1:
                    return IM_CHANNEL_SMS;
                case 2:
                    return IM_CHANNEL_QQ;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<IM_CHANNEL>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<IM_CHANNEL>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<IM_CHANNEL>() {
                    public IM_CHANNEL findValueByNumber(int number) {
                        return IM_CHANNEL.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(9);
        }

        private static final IM_CHANNEL[] VALUES = values();

        public static IM_CHANNEL valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private IM_CHANNEL(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:IM_CHANNEL)
    }

    /**
     * Protobuf enum {@code GroupType}
     * <p>
     * <pre>
     * 群组类型
     * </pre>
     */
    public enum GroupType
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>GROUP_TYPE_MULTICHAT = 1;</code>
         * <p>
         * <pre>
         * 多人会话
         * </pre>
         */
        GROUP_TYPE_MULTICHAT(0, 1),
        /**
         * <code>GROUP_TYPE_COMMUNITY = 2;</code>
         * <p>
         * <pre>
         * 社群
         * </pre>
         */
        GROUP_TYPE_COMMUNITY(1, 2),;

        /**
         * <code>GROUP_TYPE_MULTICHAT = 1;</code>
         * <p>
         * <pre>
         * 多人会话
         * </pre>
         */
        public static final int GROUP_TYPE_MULTICHAT_VALUE = 1;
        /**
         * <code>GROUP_TYPE_COMMUNITY = 2;</code>
         * <p>
         * <pre>
         * 社群
         * </pre>
         */
        public static final int GROUP_TYPE_COMMUNITY_VALUE = 2;


        public final int getNumber() {
            return value;
        }

        public static GroupType valueOf(int value) {
            switch (value) {
                case 1:
                    return GROUP_TYPE_MULTICHAT;
                case 2:
                    return GROUP_TYPE_COMMUNITY;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<GroupType>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<GroupType>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<GroupType>() {
                    public GroupType findValueByNumber(int number) {
                        return GroupType.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(10);
        }

        private static final GroupType[] VALUES = values();

        public static GroupType valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private GroupType(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:GroupType)
    }

    public interface Heart_BeatOrBuilder extends
            // @@protoc_insertion_point(interface_extends:Heart_Beat)
            com.google.protobuf.MessageOrBuilder {
    }

    /**
     * Protobuf type {@code Heart_Beat}
     * <p>
     * <pre>
     * optional int32 IM_id = 1;
     * </pre>
     */
    public static final class Heart_Beat extends
            com.google.protobuf.GeneratedMessage implements
            // @@protoc_insertion_point(message_implements:Heart_Beat)
            Heart_BeatOrBuilder {
        // Use Heart_Beat.newBuilder() to construct.
        private Heart_Beat(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Heart_Beat(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Heart_Beat defaultInstance;

        public static Heart_Beat getDefaultInstance() {
            return defaultInstance;
        }

        public Heart_Beat getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private Heart_Beat(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return YouMaiBasic.internal_static_com_proto_basic_Heart_Beat_descriptor;
        }

        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return YouMaiBasic.internal_static_com_proto_basic_Heart_Beat_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            YouMaiBasic.Heart_Beat.class, YouMaiBasic.Heart_Beat.Builder.class);
        }

        public static com.google.protobuf.Parser<Heart_Beat> PARSER =
                new com.google.protobuf.AbstractParser<Heart_Beat>() {
                    public Heart_Beat parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new Heart_Beat(input, extensionRegistry);
                    }
                };

        @Override
        public com.google.protobuf.Parser<Heart_Beat> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static YouMaiBasic.Heart_Beat parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static YouMaiBasic.Heart_Beat parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static YouMaiBasic.Heart_Beat parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static YouMaiBasic.Heart_Beat parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static YouMaiBasic.Heart_Beat parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static YouMaiBasic.Heart_Beat parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(YouMaiBasic.Heart_Beat prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Heart_Beat}
         * <p>
         * <pre>
         * optional int32 IM_id = 1;
         * </pre>
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:Heart_Beat)
                YouMaiBasic.Heart_BeatOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return YouMaiBasic.internal_static_com_proto_basic_Heart_Beat_descriptor;
            }

            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return YouMaiBasic.internal_static_com_proto_basic_Heart_Beat_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                YouMaiBasic.Heart_Beat.class, YouMaiBasic.Heart_Beat.Builder.class);
            }

            // Construct using YouMaiBasic.Heart_Beat.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return YouMaiBasic.internal_static_com_proto_basic_Heart_Beat_descriptor;
            }

            public YouMaiBasic.Heart_Beat getDefaultInstanceForType() {
                return YouMaiBasic.Heart_Beat.getDefaultInstance();
            }

            public YouMaiBasic.Heart_Beat build() {
                YouMaiBasic.Heart_Beat result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public YouMaiBasic.Heart_Beat buildPartial() {
                YouMaiBasic.Heart_Beat result = new YouMaiBasic.Heart_Beat(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof YouMaiBasic.Heart_Beat) {
                    return mergeFrom((YouMaiBasic.Heart_Beat) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(YouMaiBasic.Heart_Beat other) {
                if (other == YouMaiBasic.Heart_Beat.getDefaultInstance()) return this;
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                YouMaiBasic.Heart_Beat parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (YouMaiBasic.Heart_Beat) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            // @@protoc_insertion_point(builder_scope:Heart_Beat)
        }

        static {
            defaultInstance = new Heart_Beat(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Heart_Beat)
    }

    public interface Heart_Beat_AckOrBuilder extends
            // @@protoc_insertion_point(interface_extends:Heart_Beat_Ack)
            com.google.protobuf.MessageOrBuilder {
    }

    /**
     * Protobuf type {@code Heart_Beat_Ack}
     * <p>
     * <pre>
     * optional int32 IM_id = 1;
     * </pre>
     */
    public static final class Heart_Beat_Ack extends
            com.google.protobuf.GeneratedMessage implements
            // @@protoc_insertion_point(message_implements:Heart_Beat_Ack)
            Heart_Beat_AckOrBuilder {
        // Use Heart_Beat_Ack.newBuilder() to construct.
        private Heart_Beat_Ack(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Heart_Beat_Ack(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Heart_Beat_Ack defaultInstance;

        public static Heart_Beat_Ack getDefaultInstance() {
            return defaultInstance;
        }

        public Heart_Beat_Ack getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private Heart_Beat_Ack(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return YouMaiBasic.internal_static_com_proto_basic_Heart_Beat_Ack_descriptor;
        }

        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return YouMaiBasic.internal_static_com_proto_basic_Heart_Beat_Ack_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            YouMaiBasic.Heart_Beat_Ack.class, YouMaiBasic.Heart_Beat_Ack.Builder.class);
        }

        public static com.google.protobuf.Parser<Heart_Beat_Ack> PARSER =
                new com.google.protobuf.AbstractParser<Heart_Beat_Ack>() {
                    public Heart_Beat_Ack parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new Heart_Beat_Ack(input, extensionRegistry);
                    }
                };

        @Override
        public com.google.protobuf.Parser<Heart_Beat_Ack> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        protected Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(YouMaiBasic.Heart_Beat_Ack prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Heart_Beat_Ack}
         * <p>
         * <pre>
         * optional int32 IM_id = 1;
         * </pre>
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:Heart_Beat_Ack)
                YouMaiBasic.Heart_Beat_AckOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return YouMaiBasic.internal_static_com_proto_basic_Heart_Beat_Ack_descriptor;
            }

            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return YouMaiBasic.internal_static_com_proto_basic_Heart_Beat_Ack_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                YouMaiBasic.Heart_Beat_Ack.class, YouMaiBasic.Heart_Beat_Ack.Builder.class);
            }

            // Construct using YouMaiBasic.Heart_Beat_Ack.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return YouMaiBasic.internal_static_com_proto_basic_Heart_Beat_Ack_descriptor;
            }

            public YouMaiBasic.Heart_Beat_Ack getDefaultInstanceForType() {
                return YouMaiBasic.Heart_Beat_Ack.getDefaultInstance();
            }

            public YouMaiBasic.Heart_Beat_Ack build() {
                YouMaiBasic.Heart_Beat_Ack result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public YouMaiBasic.Heart_Beat_Ack buildPartial() {
                YouMaiBasic.Heart_Beat_Ack result = new YouMaiBasic.Heart_Beat_Ack(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof YouMaiBasic.Heart_Beat_Ack) {
                    return mergeFrom((YouMaiBasic.Heart_Beat_Ack) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(YouMaiBasic.Heart_Beat_Ack other) {
                if (other == YouMaiBasic.Heart_Beat_Ack.getDefaultInstance()) return this;
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                YouMaiBasic.Heart_Beat_Ack parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (YouMaiBasic.Heart_Beat_Ack) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            // @@protoc_insertion_point(builder_scope:Heart_Beat_Ack)
        }

        static {
            defaultInstance = new Heart_Beat_Ack(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Heart_Beat_Ack)
    }

    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_com_proto_basic_Heart_Beat_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_com_proto_basic_Heart_Beat_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_com_proto_basic_Heart_Beat_Ack_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_com_proto_basic_Heart_Beat_Ack_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        String[] descriptorData = {
                "\n\022YouMai.Basic.proto\022\017com.proto.basic\"\014\n" +
                        "\nHeart_Beat\"\020\n\016Heart_Beat_Ack*]\n\013Service" +
                        "Type\022\016\n\nCOM_SERVER\020\001\022\021\n\rROUTER_SERVER\020\002\022" +
                        "\026\n\022LOADBALANCE_SERVER\020\003\022\023\n\017TRANSFER_SERV" +
                        "ER\020\004*\276\001\n\tServiceID\022\017\n\013SID_MONITOR\020\001\022\014\n\010S" +
                        "ID_CONN\020\002\022\020\n\014SID_DISPATCH\020\003\022\r\n\tSID_LOGIN" +
                        "\020\004\022\013\n\007SID_MSG\020\005\022\023\n\017SID_LOADBALANCE\020\006\022\021\n\r" +
                        "SID_BROADCAST\020\007\022\017\n\013SID_DBPROXY\020\010\022\r\n\tSID_" +
                        "GROUP\020\t\022\r\n\tSID_BUDDY\020\n\022\r\n\tSID_REDIS\020d*\334(" +
                        "\n\tCOMMANDID\022\016\n\nHEART_BEAT\020\001\022\022\n\016HEART_BEA",
                "T_ACK\020\002\022\r\n\tROUTE_REQ\020\024\022\025\n\021ROUTE_ONLINECH" +
                        "ECK\020\025\022\031\n\025ROUTE_ONLINECHECK_ACK\020\026\022\025\n\021ROUT" +
                        "E_PHONE_CHECK\020\027\022\031\n\025ROUTE_PHONE_CHECK_ACK" +
                        "\020\030\022\016\n\nUSER_LOGIN\020e\022\022\n\016USER_LOGIN_ACK\020f\022\017" +
                        "\n\013USER_LOGOFF\020g\022\023\n\017USER_LOGOFF_ACK\020h\022\036\n\032" +
                        "MULTI_DEVICE_KICKED_NOTIFY\020i\022\013\n\007IM_TEXT\020" +
                        "j\022\016\n\nIM_PICTURE\020k\022\014\n\010IM_AUDIO\020l\022\014\n\010IM_VI" +
                        "DEO\020m\022\n\n\006IM_URL\020n\022\017\n\013IM_LOCATION\020o\022\033\n\027IM" +
                        "_LOCATION_SHARE_BEGIN\020p\022\034\n\030IM_LOCATION_S" +
                        "HARE_ANSWER\020q\022\036\n\032IM_LOCATION_SHARE_CONTI",
                "NUE\020r\022\031\n\025IM_LOCATION_SHARE_END\020s\022\r\n\tPHON" +
                        "EDIAL\020u\022\021\n\rPHONEDIAL_ACK\020v\022\025\n\021GET_CONTAC" +
                        "TS_INFO\020w\022\031\n\025GET_CONTACTS_INFO_ACK\020x\022\031\n\025" +
                        "PHP_USER_MODIFYSTATUS\020y\022\035\n\031PHP_USER_MODI" +
                        "FYSTATUS_ACK\020z\022\036\n\032PHP_ADMIN_MODIFYUSERST" +
                        "ATUS\020{\022\"\n\036PHP_ADMIN_MODIFYUSERSTATUS_ACK" +
                        "\020|\022\017\n\nREQUEST_IP\020\220\003\022\023\n\016REQUEST_IP_ACK\020\221\003" +
                        "\022 \n\033REGIST_COMMUNICATIONSERVICE\020\222\003\022\024\n\017RE" +
                        "PORT_ONLINERS\020\223\003\022\024\n\017BROATCAT_NOTIFY\020\224\003\022\024" +
                        "\n\017ROUTE_BRAODCAST\020\225\003\022\033\n\026CID_USER_STAT_PU",
                "SH_REQ\020\226\003\022\033\n\026CID_USER_STAT_SYNC_REQ\020\227\003\022\033" +
                        "\n\026CID_USER_STAT_SYNC_RSP\020\230\003\022\017\n\nREGIST_RS" +
                        "P\020\231\003\022\024\n\017GENERAL_MESSAGE\020\365\003\022\030\n\023POP_GENERA" +
                        "L_MESSAGE\020\366\003\022\034\n\027POP_GENERAL_MESSAGE_ACK\020" +
                        "\367\003\022\r\n\010BULLETIN\020\330\004\022\024\n\017BULLETIN_NOTIFY\020\331\004\022" +
                        "\025\n\020BULLETIN_PUBLISH\020\335\004\022\031\n\024BULLETIN_PUBLI" +
                        "SH_ACK\020\336\004\022\030\n\023BIZCARD_GET_BYPHONE\020\275\005\022\034\n\027B" +
                        "IZCARD_GET_BYPHONE_ACK\020\276\005\022\023\n\016BIZCARD_INS" +
                        "ERT\020\277\005\022\027\n\022BIZCARD_INSERT_ACK\020\300\005\022\023\n\016BIZCA" +
                        "RD_UPDATE\020\301\005\022\027\n\022BIZCARD_UPDATE_ACK\020\302\005\022\023\n",
                "\016BIZCARD_DELETE\020\303\005\022\027\n\022BIZCARD_DELETE_ACK" +
                        "\020\304\005\022\026\n\021BUSINESS_QUERY_AD\020\356\005\022\032\n\025BUSINESS_" +
                        "QUERY_AD_ACK\020\357\005\022\025\n\020BUSINESS_SAVE_AD\020\360\005\022\031" +
                        "\n\024BUSINESS_SAVE_AD_ACK\020\361\005\022\027\n\022BUSINESS_UP" +
                        "DATE_AD\020\362\005\022\033\n\026BUSINESS_UPDATE_AD_ACK\020\363\005\022" +
                        "\027\n\022BUSINESS_DELETE_AD\020\364\005\022\033\n\026BUSINESS_DEL" +
                        "ETE_AD_ACK\020\365\005\022\030\n\023USERSHOWRULE_RESULT\020\366\005\022" +
                        "\025\n\020USERSHOWRULE_GET\020\367\005\022\026\n\021USERSHOWRULE_S" +
                        "AVE\020\370\005\022\030\n\023USERSHOWRULE_UPDATE\020\371\005\022\030\n\023USER" +
                        "SHOWRULE_DELETE\020\372\005\022\017\n\nBONDERY_MQ\020\220N\022\017\n\nS",
                "YSTEM_LOG\020\221N\022\022\n\rLOCATIONSHARE\020\314S\022\031\n\024LOCA" +
                        "TIONSHARE_NOTIFY\020\315S\022\030\n\023LOCATIONSHARE_INV" +
                        "IT\020\316S\022\034\n\027LOCATIONSHARE_INVIT_ACK\020\317S\022\037\n\032L" +
                        "OCATIONSHARE_INVIT_NOTIFY\020\320S\022\027\n\022LOCATION" +
                        "SHARE_JOIN\020\321S\022\033\n\026LOCATIONSHARE_JOIN_ACK\020" +
                        "\322S\022\036\n\031LOCATIONSHARE_JOIN_NOTIFY\020\323S\022\027\n\022LO" +
                        "CATIONSHARE_QUIT\020\325S\022\033\n\026LOCATIONSHARE_QUI" +
                        "T_ACK\020\326S\022\036\n\031LOCATIONSHARE_QUIT_NOTIFY\020\327S" +
                        "\022\016\n\tPUSH_APNS\020\261T\022\022\n\rPUSH_APNS_ACK\020\262T\022\021\n\014" +
                        "PUSH_GENERAL\020\265T\022\r\n\010PUSH_SMS\020\266T\022\025\n\020ENDORS",
                "EMENT_TAKE\020\225U\022\031\n\024ENDORSEMENT_TAKE_ACK\020\226U" +
                        "\022\026\n\021ENDORSEMENT_QUERY\020\237U\022\032\n\025ENDORSEMENT_" +
                        "QUERY_ACK\020\240U\022\026\n\021ENDORSEMENT_DELET\020\251U\022\033\n\026" +
                        "ENDORSEMENT_DELETE_ACK\020\252U\022\034\n\027ENDORSEMENT" +
                        "_ADMIN_QUERY\020\307U\022 \n\033ENDORSEMENT_ADMIN_QUE" +
                        "RY_ACK\020\310U\022\022\n\rSHOWBIZ_QUERY\020\371U\022\026\n\021SHOWBIZ" +
                        "_QUERY_ACK\020\372U\022\023\n\016SHOWBIZ_INSERT\020\203V\022\027\n\022SH" +
                        "OWBIZ_INSERT_ACK\020\204V\022\023\n\016SHOWBIZ_DELETE\020\215V" +
                        "\022\027\n\022SHOWBIZ_DELETE_ACK\020\216V\022\023\n\016SHOWBIZ_UPD" +
                        "ATE\020\227V\022\027\n\022SHOWBIZ_UPDATE_ACK\020\230V\022\027\n\022SHOWP",
                "ERSONAL_QUERY\020\241V\022\033\n\026SHOWPERSONAL_QUERY_A" +
                        "CK\020\242V\022\030\n\023SHOWPERSONAL_INSERT\020\253V\022\034\n\027SHOWP" +
                        "ERSONAL_INSERT_ACK\020\254V\022\030\n\023SHOWPERSONAL_UP" +
                        "DATE\020\265V\022\034\n\027SHOWPERSONAL_UPDATE_ACK\020\266V\022\030\n" +
                        "\023SHOWPERSONAL_DELETE\020\277V\022\034\n\027SHOWPERSONAL_" +
                        "DELETE_ACK\020\300V\022\r\n\010SHOWDIAL\020\311V\022\021\n\014SHOWDIAL" +
                        "_ACK\020\312V\022\024\n\017SHOWDIAL_NOTIFY\020\313V\022\'\n\"SHOWDIA" +
                        "L_CACHE_UPDATE_SYSTEMNOTIFY\020\323V\022\035\n\027CID_US" +
                        "ER_CONNECT_EXCEPT\020\221\200\001\022\036\n\030CID_USER_STATE_" +
                        "BROADCAST\020\221\202\001\022\033\n\025CID_USER_STATE_REPORT\020\222",
                "\202\001\022%\n\037CID_MONITOR_CLIENT_REGISTER_REQ\020\221\204" +
                        "\001\022%\n\037CID_MONITOR_CLIENT_REGISTER_RSP\020\222\204\001" +
                        "\022&\n CID_MASTER_BROADCAST_SERVER_INFO\020\223\204\001" +
                        "\022 \n\032CID_S2S_AUTHENTICATION_REQ\020\224\204\001\022 \n\032CI" +
                        "D_S2S_AUTHENTICATION_RSP\020\225\204\001\022\022\n\014CID_S2S_" +
                        "PING\020\226\204\001\022\022\n\014CID_S2S_PONG\020\227\204\001\022\032\n\024CID_REGI" +
                        "STER_CMD_REQ\020\241\204\001\022\034\n\026CID_CLUSTER_STATUS_R" +
                        "EQ\020\241\206\001\022\034\n\026CID_CLUSTER_STATUS_RSP\020\242\206\001\022\030\n\022" +
                        "CID_CONFIG_SET_REQ\020\246\206\001\022\030\n\022CID_CONFIG_SET" +
                        "_RSP\020\247\206\001\022\024\n\016CID_CHAT_BUDDY\020\221\240\001\022\024\n\016CID_CH",
                "AT_GROUP\020\222\240\001\022\034\n\026CID_OFFLINE_MSG_NOTIFY\020\223" +
                        "\240\001\022\026\n\020CID_CHAT_MSG_ACK\020\224\240\001\022\022\n\014CID_PUSH_M" +
                        "SG\020\225\240\001\022\026\n\020CID_PUSH_MSG_ACK\020\226\240\001\022 \n\032CID_CH" +
                        "AT_CUSTOMER_SERVICES\020\227\242\001\022\026\n\020CID_CHAT_MAC" +
                        "HINE\020\230\242\001\022\030\n\022CID_GROUP_LIST_REQ\020\221\300\001\022\030\n\022CI" +
                        "D_GROUP_LIST_RSP\020\222\300\001\022\030\n\022CID_GROUP_INFO_R" +
                        "EQ\020\223\300\001\022\030\n\022CID_GROUP_INFO_RSP\020\224\300\001\022\032\n\024CID_" +
                        "GROUP_MEMBER_REQ\020\225\300\001\022\032\n\024CID_GROUP_MEMBER" +
                        "_RSP\020\226\300\001\022\032\n\024CID_GROUP_CREATE_REQ\020\227\300\001\022\032\n\024" +
                        "CID_GROUP_CREATE_RSP\020\230\300\001\022\034\n\026CID_GROUP_DI",
                "SSOLVE_REQ\020\231\300\001\022\034\n\026CID_GROUP_DISSOLVE_RSP" +
                        "\020\232\300\001\022\037\n\031CID_GROUP_INFO_MODIFY_REQ\020\233\300\001\022\037\n" +
                        "\031CID_GROUP_INFO_MODIFY_RSP\020\234\300\001\022!\n\033CID_GR" +
                        "OUP_CHANGE_MEMBER_REQ\020\235\300\001\022!\n\033CID_GROUP_C" +
                        "HANGE_MEMBER_RSP\020\236\300\001\022\032\n\024CID_GROUP_OPT_NO" +
                        "TIFY\020\241\300\001\022$\n\036CID_GROUP_CHANGE_MEMBER_NOTI" +
                        "FY\020\243\300\001\022#\n\035CID_GROUP_INFO_MODIFY__NOTIFY\020" +
                        "\244\300\001\022*\n$CID_GROUP_CHANGE_MEMBER_TRANSFER_" +
                        "REQ\020\260\300\001\022*\n$CID_GROUP_CHANGE_MEMBER_TRANS" +
                        "FER_RSP\020\261\300\001\022\027\n\021CID_GROUP_SET_REQ\020\262\300\001\022\027\n\021",
                "CID_GROUP_SET_RSP\020\263\300\001\022\032\n\024S2S_GROUP_CHANG" +
                        "E_RSP\020\264\300\001\022\026\n\020CID_ORG_LIST_REQ\020\221\302\001\022\026\n\020CID" +
                        "_ORG_LIST_RSP\020\222\302\001\022!\n\033CID_GMSG_OFFLINE_MS" +
                        "G_NOTIFY\020\242\304\001\022\033\n\025CID_MSG_DATA_LIST_REQ\020\243\304" +
                        "\001\022\033\n\025CID_MSG_DATA_LIST_RSP\020\244\304\001\022\037\n\031CID_GR" +
                        "OUP_CHAT_MSG_CANCEL\020\245\304\001\022\036\n\030CID_GMSG_OFFL" +
                        "INE_MSG_ACK\020\246\304\001\022\026\n\020CID_S2S_CHAT_MSG\020\221\306\001\022" +
                        "\036\n\030CID_S2S_GROUP_MEMBER_REQ\020\222\306\001\022\036\n\030CID_S" +
                        "2S_GROUP_MEMBER_RSP\020\223\306\001\022\034\n\026CID_S2S_BUDDY" +
                        "_LIST_REQ\020\224\306\001\022\034\n\026CID_S2S_BUDDY_LIST_RSP\020",
                "\225\306\001\022\027\n\021CID_USER_INFO_REQ\020\221\340\001\022\027\n\021CID_USER" +
                        "_INFO_RSP\020\222\340\001\022\033\n\025CID_USER_INFO_OPT_REQ\020\223" +
                        "\340\001\022\033\n\025CID_USER_INFO_OPT_RSP\020\224\340\001\022)\n#CID_B" +
                        "UDDY_LIST_SINGLE_USER_INFO_REQ\020\207\344\001\022\"\n\034CI" +
                        "D_BUDDY_LIST_USER_INFO_RSP\020\210\344\001\022&\n CID_BU" +
                        "DDY_LIST_CHANGE_AVATAR_REQ\020\217\344\001\022&\n CID_BU" +
                        "DDY_LIST_CHANGE_AVATAR_RSP\020\220\344\001\022)\n#CID_BU" +
                        "DDY_LIST_CHANGE_SIGN_INFO_REQ\020\222\344\001\022)\n#CID" +
                        "_BUDDY_LIST_CHANGE_SIGN_INFO_RSP\020\223\344\001\022)\n#" +
                        "CID_BUDDY_LIST_MODIFY_USER_INFO_REQ\020\224\344\001\022",
                ")\n#CID_BUDDY_LIST_MODIFY_USER_INFO_RSP\020\225" +
                        "\344\001\022\034\n\026CID_BUDDY_LIST_OPT_REQ\020\226\344\001\022\034\n\026CID_" +
                        "BUDDY_LIST_OPT_RSP\020\227\344\001\022(\n\"CID_BUDDY_LIST" +
                        "_MODIFY_NICKNAME_REQ\020\230\344\001\022(\n\"CID_BUDDY_LI" +
                        "ST_MODIFY_NICKNAME_RSP\020\231\344\001\022\030\n\022CID_BUDDY_" +
                        "LIST_REQ\020\232\344\001\022\030\n\022CID_BUDDY_LIST_RSP\020\233\344\001\022\037" +
                        "\n\031CID_BUDDY_LIST_OPT_RESULT\020\234\344\001\022 \n\032CID_C" +
                        "ONTACT_COLLECTION_REQ\020\241\344\001\022 \n\032CID_CONTACT" +
                        "_COLLECTION_RSP\020\242\344\001\022\037\n\031CID_BUDDY_LIST_OP" +
                        "T_NOTIFY\020\243\344\001*X\n\tUSER_TYPE\022\025\n\021USER_TYPE_U",
                "NKNOWN\020\000\022\026\n\022USER_TYPE_PERSONAL\020\001\022\034\n\030USER" +
                        "_TYPE_PUBLIC_ACCOUNT\020\002*\264\r\n\nERRNO_CODE\022\021\n" +
                        "\rERRNO_CODE_OK\020\000\022\026\n\022ERRNO_CODE_DEFAULT\020\002" +
                        "\022$\n ERRNO_CODE_LOGIN_IN_OTHER_DEVICE\020d\022\032" +
                        "\n\026ERRNO_CODE_NO_PROTOCOL\020e\022\036\n\032ERRNO_CODE" +
                        "_TAG_NO_PROTOCOL\020f\022\031\n\025ERRNO_CODE_PUSH_QU" +
                        "EUE\020g\022\037\n\033ERRNO_CODE_LOGON_NO_PHONE_S\020h\022\"" +
                        "\n\036ERRNO_CODE_HEART_ERR_SESSION_S\020i\022\030\n\024ER" +
                        "RNO_CODE_NOT_LOGON\020j\022\032\n\026ERRNO_CODE_WITHO" +
                        "UT_TAG\020k\022\032\n\026ERRNO_CODE_WITHOUT_UID\020l\022\035\n\031",
                "ERRNO_CODE_WITHOUT_TERMID\020m\022\034\n\030ERRNO_COD" +
                        "E_ERR_SESSIONID\020n\022\033\n\027ERRNO_CODE_TERM_UNA" +
                        "LIVE\020o\022\026\n\022ERRNO_CODE_ERR_UID\020p\022\026\n\022ERRNO_" +
                        "CODE_ERR_PID\020q\022\031\n\025ERRNO_CODE_ERR_RESEND\020" +
                        "r\022\026\n\022ERRNO_CODE_ERR_TID\020s\022\023\n\016ERRNO_CODE_" +
                        "SQL\020\310\001\022\031\n\024ERRNO_CODE_DATA_SRAL\020\311\001\022&\n!ERR" +
                        "NO_CODE_NOT_FIND_TARGET_USERID\020\313\001\022.\n)ERR" +
                        "NO_CODE_DATA_WAREHOUSING_FAILURE_MYSQL\020\314" +
                        "\001\022.\n)ERRNO_CODE_DATA_WAREHOUSING_FAILURE" +
                        "_REDIS\020\315\001\022#\n\036ERRNO_CODE_DB_SERVER_EXCEPT",
                "ION\020\316\001\022\"\n\035ERRNO_CODE_USER_SESSION_ERROR\020" +
                        "\317\001\022\036\n\031ERRNO_CODE_USER_NOT_LOGIN\020\320\001\022\035\n\030ER" +
                        "RNO_CODE_USER_ID_ERROR\020\321\001\022\'\n\"ERRNO_CODE_" +
                        "USER_SEND_TOROUTE_ERROR\020\322\001\022\035\n\030ERRNO_CODE" +
                        "_NOT_DST_PHONE\020\323\001\022&\n!ERRNO_CODE_DATABASE" +
                        "_QUERY_FAILDED\020\324\001\022\036\n\031ERRNO_CODE_DATA_EXC" +
                        "EPTION\020\325\001\022\035\n\030ERRNO_CODE_NOT_SESSIONID\020\326\001" +
                        "\022\031\n\024ERRNO_CODE_NOT_PHONE\020\327\001\022\033\n\026ERRNO_COD" +
                        "E_PHONE_ERROR\020\330\001\022!\n\034ERRNO_CODE_DATABASE_" +
                        "NOT_DATA\020\331\001\022\034\n\027ERRNO_CODE_SHOW_EXPIRED\020\332",
                "\001\022\034\n\027ERRNO_CODE_NOT_TOKEN_ID\020\333\001\022\030\n\023ERRNO" +
                        "_CODE_NOT_SHOW\020\334\001\022\036\n\031ERRNO_CODE_NOT_HUXI" +
                        "N_USER\020\223\003\022\035\n\030ERRNO_CODE_NOT_DEVICE_ID\020\224\003" +
                        "\022#\n\036ERRNO_CODE_BLOCKED_BY_DST_USER\020\365\003\022!\n" +
                        "\034ERRNO_CODE_INVALID_USER_INFO\020\315\010\022\037\n\032ERRN" +
                        "O_CODE_INVALID_SESSION\020\316\010\022\036\n\031ERRNO_CODE_" +
                        "INVALID_PASSWD\020\317\010\022+\n&ERRNO_CODE_INVALID_" +
                        "IM_CHAT_TARGET_USER\020\261\t\0226\n1ERRNO_CODE_INV" +
                        "ALID_IM_CHAT_EMPTY_BODY_NOT_ALLOWED\020\262\t\022," +
                        "\n\'ERRNO_CODE_LOCATIONSHARE_TASK_NOT_EXIS",
                "T\020\225\n\022-\n(ERRNO_CODE_LOCATIONSHARE_NOT_INS" +
                        "IDE_TASK\020\226\n\022!\n\034ERRNO_CODE_USER_NOT_IN_GR" +
                        "OUP\020\227\n\022\036\n\031ERRNO_CODE_USER_IS_DELETE\020\230\n\022\035" +
                        "\n\030ERRNO_CODE_USER_IS_BLACK\020\231\n\022\036\n\031ERRNO_C" +
                        "ODE_USER_NOT_BUDDY\020\232\n*\230\001\n\013Device_Type\022\025\n" +
                        "\021DeviceType_IPhone\020\001\022\026\n\022DeviceType_Andro" +
                        "id\020\002\022\023\n\017DeviceType_IPad\020\003\022\031\n\025DeviceType_" +
                        "AndroidPad\020\004\022\026\n\022DeviceType_UNKNOWN\020\005\022\022\n\016" +
                        "DeviceType_WEB\020\006*j\n\020USER_SHOW_STATUS\022\033\n\027" +
                        "USER_SHOW_STATUS_NORMAL\020\000\022\034\n\030USER_SHOW_S",
                "TATUS_DISABLE\020\001\022\033\n\027USER_SHOW_STATUS_FROZ" +
                        "EN\020\002*Q\n\tUserState\022\025\n\021USER_STATE_ONLINE\020\000" +
                        "\022\026\n\022USER_STATE_OFFLINE\020\001\022\025\n\021USER_STATE_L" +
                        "OGOUT\020\003*v\n\nResultCode\022\027\n\023RESULT_CODE_SUC" +
                        "CESS\020\001\022\024\n\020RESULT_CODE_FAIL\020\002\022\030\n\024RESULT_C" +
                        "ODE_NOT_FIND\020\003\022\037\n\033RESULT_CODE_PARAMETER_" +
                        "ERROR\020\004*K\n\nIM_CHANNEL\022\026\n\022IM_CHANNEL_DEFA" +
                        "ULT\020\000\022\022\n\016IM_CHANNEL_SMS\020\001\022\021\n\rIM_CHANNEL_" +
                        "QQ\020\002*?\n\tGroupType\022\030\n\024GROUP_TYPE_MULTICHA" +
                        "T\020\001\022\030\n\024GROUP_TYPE_COMMUNITY\020\002"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                        }, assigner);
        internal_static_com_proto_basic_Heart_Beat_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_com_proto_basic_Heart_Beat_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_com_proto_basic_Heart_Beat_descriptor,
                new String[]{});
        internal_static_com_proto_basic_Heart_Beat_Ack_descriptor =
                getDescriptor().getMessageTypes().get(1);
        internal_static_com_proto_basic_Heart_Beat_Ack_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_com_proto_basic_Heart_Beat_Ack_descriptor,
                new String[]{});
    }

    // @@protoc_insertion_point(outer_class_scope)
}
